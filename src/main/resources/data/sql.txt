##aone_2018-07-30.sql
select distinct a.int_test,date_format(gmt_create,'%Y%m'),date_format(gmt_modified,'%Y') , table_version from (select int_test,now() as gmt_create,now() as gmt_modified,1 as table_version from test_datatype_list) as a inner join (select int_test from test_datatype_list) as b on 1=1 and a.int_test=b.int_test order by 1,2,3,4


##aone_2018-07-30.sql
select id, gid, date_format(now_time,'%Y'), cname from (select id, gid, now() as now_time from grade) as a inner join (select cid, cname from course where cid <=10 ) as b on a.id = b.cid order by 1,2,3,4


##aone_2017-03-10.sql
select latitude, var_pop(long_test),VAR_SAMP(long_test),VARIANCE(long_test) ,STDDEV_SAMP(long_test)  from (select * from test where id >980) as T group by latitude  having sum(distinct long_test) <500 order by 1,2,4 limit 10
#the baseline is =>
latitude|var_pop(long_test)|VAR_SAMP(long_test)|VARIANCE(long_test)|STDDEV_SAMP(long_test)|
null|285801|381068|285801|617.3070548762585|
84.1245|304152.25|608304.5|304152.25|779.938779648762|
85.1748|267638.1875|356850.9166666667|267638.1875|597.3699998046995|
85.4568|287298.6666666667|430948|287298.6666666667|656.4662976878554|
86.1453|0|null|0|null|
#current execute result is =>
latitude|VAR_POP(long_test)|VAR_SAMP(long_test)|VARIANCE(long_test)|STDDEV_SAMP(long_test)|
null|285801.00000|381068.00000|285801.00000|617.30705|
84.12450|304152.50000|608305.00000|304152.50000|779.93910|
85.17480|267638.25000|356851.00000|267638.25000|597.37007|
85.45680|287298.66667|430948.00000|287298.66667|656.46630|
86.14530|0.00000|null|0.00000|null|

##func_numeric_2_2017-05-30.sql
select  58.65%2 as col5 from test where id=3
#the baseline is =>
col5|
0.65|
#current execute result is =>
col5|
0.00000|

##func_numeric_2_2017-05-30.sql
select  58.65%2 as col5 from test_datatype_list order by 1


##func_time_format_2017-04-30.sql
select substring(a,1,18) from (select now() as a,id from teacher_text)tmp


##func_time_format_2017-04-30.sql
select substring(a,1,18) from (select now() as a)tmp


##func_time_format_2017-04-30.sql
select a,b,substring(c,1,18),substring(d,1,18) from (select varchar_test a, count(*) b , now() c,current_timestamp() d from test_datatype_list group by varchar_test order by 1) tmp1 order by 1


##func_time_format_2017-04-30.sql
select substring(b,1,18) from (select timestampdiff(day,timestamp_test,now()), now() b from test_datatype_list order by 1,2)tmp1


##func_aggregate_loop_distinct_2017-04-30.sql
select avg(distinct case when a.int_test> 3 then 1 else 4 end ),sum(distinct case when int_test> 3 then 2 else 4 end ) from test a natural join mpp_test_tb b order by 1
#the baseline is =>
avg(distinct case when a.int_test> 3 then 1 else 4 end )|sum(distinct case when int_test> 3 then 2 else 4 end )|
2.5000|6|
#current execute result is =>
 Column 'int_test' is ambiguous

##func_numeric_2017-05-30.sql
select abs(sudong_score),abs(1754.2),abs(-234) from student_numeric where id =20
#the baseline is =>
abs(sudong_score)|abs(1754.2)|abs(-234)|
87.28|1754.2|234|
#current execute result is =>
ABS(sudong_score)|ABS(1754.2)|ABS(-234)|
87.28000|1754.00000|234|

##func_numeric_2017-05-30.sql
select id,abs(sudong_score),abs(1754.2),abs(-234) from student_numeric order by id

##func_aggregate_loop_distinct_2017-04-30.sql
select a.time_test , avg(distinct case when a.int_test> 3 then 1 else 4 end ),sum(distinct case when int_test> 3 then 2 else 4 end ) from test a natural join mpp_test_tb b group by a.time_test order by 1


##func_encryption_2017-12-30.sql
select distinct a.id, md5(a.varchar_test) from
test_datatype_list a  join test_datatype_list b
where a.int_test=b.int_test and a.varchar_test=b.varchar_test
and md5(b.varchar_test) ='10609324d16756c2f79d118fa12160c0' or md5(a.varchar_test) is not null group by md5(varchar_test)
order by 1


##func_numeric_2017-05-30.sql
select log2(sudong_score),log2(1754.2),log2(-234),log2(100),log2(200) from student_numeric where id =20
#the baseline is =>
log2(sudong_score)|log2(1754.2)|log2(-234)|log2(100)|log2(200)|
6.447579196548882|10.776597526492102|null|6.643856189774725|7.643856189774724|
#current execute result is =>
log2(sudong_score)|log2(1754.2)|log2(-234)|log2(100)|log2(200)|
6.44758|10.00000|null|6.00000|7.00000|

##func_numeric_2017-05-30.sql
select id,log2(sudong_score),log2(1754.2),log2(-234),log2(100) from student_numeric order by id

##func_string_5_2018-09-30.sql
select o_orderkey,make_set(1|4,'ab','cd',O_ORDERPRIORITY) from aa_orders order by 1 limit 20


##func_string_5_2018-09-30.sql
select id, make_set(1|4,time_test,date_test,timestamp_test) from test order by 1 limit 20

##func_string_5_2018-09-30.sql
select id, make_set(1|6,short_test,int_test,floor(double_test)) from test order by 1 limit 20

##func_string_5_2018-09-30.sql
select id, make_set(1|6,time_test,string_test,short_test) from test order by 1 limit 20

##func_string_5_2018-09-30.sql
select distinct substring(make_set(1|4,O_SHIPPRIORITY,o_custkey,O_ORDERSTATUS),1,10) from aa_orders order by 1


##func_CCF_2017-04-30.sql
select date_test,IFNULL(NULLIF(sum(int_test),30),'total 30') from test_datatype_list where id=1 group by date_test


##func_cast_op_2017-05-30.sql
select distinct cast(string_test AS CHAR CHARACTER SET utf8) from test order by 1


##func_cast_op_2017-05-30.sql
select distinct cast(a.string_test AS CHAR CHARACTER SET utf8) from test a natural join (select * from mpp_test_tb where id <=100) b order by 1


##func_time_basic_2017-04-30.sql
select substr(t1,1,10),substr(t2,1,10) from (select * from (select now() as t1) a inner join (select now() as t2) b) c


##join_natural_2017-03-10.sql
select sum(id) from (select * from community where  co_status is not null ) t natural left join  (select * from student_hobby where id<=5) t1 order by 1


##self_join_2017-03-10.sql
select * from student_numeric a NATURAL join student_numeric b order by 1 limit 10

##self_join_2017-03-10.sql
select * from student_numeric a NATURAL left join student_numeric b order by 1 limit 10


##self_join_2017-03-10.sql
select * from student_numeric a NATURAL left outer join student_numeric b order by 1 limit 10


##optimization_2017-09-30.sql
select m.id,m.int_test,n.id from (select * from test_datatype_list where id<=5) m
inner join (select * from test_datatype_list b natural join teacher)n
where m.id in (1,2,3) and n.id in (2,3,4) order by 1,2,3


##optimization_2017-09-30.sql
select m.id,m.int_test,n.id from (select * from test_datatype_list where id<=5) m
inner join (select * from test_datatype_list b natural join teacher)n on m.id=n.id
where m.id in (1,2,3) and n.id in (2,3,4) order by 1,2,3


##optimization_2017-09-30.sql
select m.id,m.int_test,n.id from (select * from test_datatype_list where id<=5) m
inner join (select * from test_datatype_list b natural join teacher)n on m.id=n.id
where m.id in (1,2)  and n.id between 2 and 10 order by 1,2,3


##join_outer_2017-03-10.sql
select * from teacher_text right outer join (select id from teacher where id<=6) b using(id) order by 1,2,3,4


##join_2017-03-10.sql
select * from student_numeric a NATURAL left join type_numeric b order by 1 limit 10


##join_2017-03-10.sql
select * from student_numeric a NATURAL left outer  join type_numeric b order by 1 limit 10


##olap_2018-10-30.sql
select * from (select product, sum(profit) from mysql_olap_t1 group by product with rollup)tmp order by 1


##olap_2018-10-30.sql
select * from (select product, sum(profit),avg(profit) from mysql_olap_t1 group by product with rollup)tmp order by 1


##olap_2018-10-30.sql
select * from (select product, country_id , year, sum(profit) from mysql_olap_t1 group by product, country_id, year with rollup)tmp order by 1,2,3

##olap_2018-10-30.sql
select * from (select product, country_id , year, sum(profit) from mysql_olap_t1 group by product, country_id, year with rollup having country_id = 1)tmp order by 1,2,3,4


##olap_2018-10-30.sql
select * from (select product, country_id , year, sum(profit) from mysql_olap_t1 group by product, country_id, year with rollup having sum(profit) > 200)tmp order by 1,2,3,4


##case_2017-06-30.sql
select (CASE 'two' when 'one' then '1' WHEN 'two' then '2' END) | 0


##olap_2018-10-30.sql
select * from (select product, country_id , year, sum(profit) from mysql_olap_t1 group by product, country_id, year with rollup having sum(profit) > 7000)tmp order by 1,2,3,4


##olap_2018-10-30.sql
select * from (select product, sum(profit)/count(*) from mysql_olap_t1 group by product with rollup)tmp order by 1,2


##olap_2018-10-30.sql
select * from (select concat(product,':',country_id), 1+1, sum(profit)/count(*) from mysql_olap_t1 group by concat(product,':',country_id) with rollup)tmp order by 1,2,3


##olap_2018-10-30.sql
select * from (select product, `sum` from (select product, sum(profit) as 'sum' from mysql_olap_t1 group by product with rollup) as tmp where product is null)tmp order by 1,2


##zsh_1_2017-04-30.sql
SELECT count(so.l_orderkey) FROM aa_lineitem so LEFT JOIN aa_orders sr ON (so.L_ORDERKEY=sr.O_ORDERKEY)
LEFT JOIN aa_customer pa ON (sr.o_custkey = pa.c_custkey )
LEFT JOIN aa_supplier sso ON (so.l_suppkey=sso.s_suppkey )
LEFT JOIN aa_part srp ON (so.l_partkey= srp.p_partkey AND srp.p_type in ('ECONOMY PLATED COPPER','LARGE ANODIZED COPPER') ) cross join ta_boolean_test tb
WHERE so.l_shipmode in ('MAIL','SHIP') AND so.L_TAX=0.02 AND so.L_RETURNFLAG='N'
AND so.L_SHIPINSTRUCT in ('DELIVER IN PERSON','TAKE BACK RETURN') AND so.L_COMMITDATE <= '1996-04-20'
AND srp.p_size IN ( '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' , '11' , '12' , '13' , '14' , '15' , '16' , '17' , '18' , '19' , '20' , '21' , '22' , '23' , '24' , '25' , '26' , '27' , '28' , '29' , '30' , '31' , '32' , '33' , '34' , '35' , '36' , '37' , '38' , '39' )
AND sr.O_ORDERPRIORITY IN ('5-LOW' , '1-URGENT' , '4-NOT SPECIFIEd' )
AND tb.val


##oracle_01_2017-11-30.sql
SELECT   YR, QTR, MON,CHN, S, 0 NS
FROM
    (SELECT DISTINCT CALENDAR_YEAR YR, CALENDAR_QUARTER_DESC QTR,
            CALENDAR_MONTH_DESC MON FROM ORACLE_TIMES) V2
      LEFT JOIN
    (
     SELECT CALENDAR_YEAR YR,CALENDAR_QUARTER_DESC QTR ,
            CALENDAR_MONTH_DESC MON,CHANNEL_ID CHN, SUM(AMOUNT) S
     FROM ORACLE_SALES S,ORACLE_TIMES T
     WHERE CHANNEL_ID IN ('S','I')
     AND S.TIME_ID = T.TIME_ID
     GROUP BY CALENDAR_YEAR,CALENDAR_QUARTER_DESC,CALENDAR_MONTH_DESC,CHANNEL_ID
    ) V1
      USING (YR, QTR, MON)
UNION
SELECT   YR, QTR, MON,CHN, S, 0 NS
FROM
    (SELECT DISTINCT CALENDAR_YEAR YR, CALENDAR_QUARTER_DESC QTR,
            CALENDAR_MONTH_DESC MON FROM ORACLE_TIMES) V2
      LEFT JOIN
    (
     SELECT CALENDAR_YEAR YR,CALENDAR_QUARTER_DESC QTR ,
            CALENDAR_MONTH_DESC MON,CHANNEL_ID CHN, SUM(AMOUNT) S
     FROM ORACLE_SALES S,ORACLE_TIMES T
     WHERE CHANNEL_ID IN ('S','I')
     AND S.TIME_ID = T.TIME_ID
     GROUP BY CALENDAR_YEAR,CALENDAR_QUARTER_DESC,CALENDAR_MONTH_DESC,CHANNEL_ID
    ) V1
      USING (YR, QTR, MON)
GROUP BY CHN

##oracle_01_2017-11-30.sql
SELECT S.YEAR,V.MTH,CHN,AMT_SOLD,QTY_SOLD,AMT_SOLD  FROM
  (SELECT CALENDAR_YEAR YEAR,CALENDAR_MONTH_DESC MTH,CHANNEL_ID CHN,
       SUM(AMOUNT) AMT_SOLD
  FROM ORACLE_SALES S , ORACLE_TIMES T
  WHERE PROD_ID < 1000
  AND CALENDAR_YEAR = '1998'
  AND S.TIME_ID = T.TIME_ID
  GROUP BY CALENDAR_YEAR, CALENDAR_MONTH_DESC, CHANNEL_ID WITH ROLLUP) S
 RIGHT OUTER JOIN
  (SELECT CALENDAR_YEAR YEAR,CALENDAR_MONTH_DESC MTH,SUM(QUANTITY_SOLD) QTY_SOLD
       FROM   ORACLE_SALES  S , ORACLE_TIMES T
  WHERE S.TIME_ID = T.TIME_ID
  GROUP BY CALENDAR_YEAR, CALENDAR_MONTH_DESC WITH ROLLUP
UNION
SELECT CALENDAR_YEAR YEAR,CALENDAR_MONTH_DESC MTH,SUM(QUANTITY_SOLD) QTY_SOLD
       FROM   ORACLE_SALES  S , ORACLE_TIMES T
  WHERE S.TIME_ID = T.TIME_ID
GROUP BY CALENDAR_MONTH_DESC,CALENDAR_YEAR WITH ROLLUP
) V
ON S.MTH = V.MTH
WHERE S.YEAR=V.YEAR
GROUP BY YEAR
ORDER BY 1, 2, 3, 4, 5, 6


##zsh_1_2017-04-30.sql
SELECT count(*) FROM aa_lineitem so LEFT JOIN aa_orders sr ON (so.L_ORDERKEY=sr.O_ORDERKEY)
LEFT JOIN aa_customer pa ON (sr.o_custkey = pa.c_custkey )
LEFT JOIN aa_supplier sso ON (so.l_suppkey=sso.s_suppkey )
LEFT JOIN aa_part srp ON (so.l_partkey= srp.p_partkey AND srp.p_type in ('ECONOMY PLATED COPPER','LARGE ANODIZED COPPER') )
WHERE so.l_shipmode in ('MAIL','SHIP') AND so.L_TAX=0.02 AND so.L_RETURNFLAG='N'
AND so.L_SHIPINSTRUCT in ('DELIVER IN PERSON','TAKE BACK RETURN') AND so.L_COMMITDATE <= '1996-04-20'
AND srp.p_size IN ( '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' , '11' , '12' , '13' , '14' , '15' , '16' , '17' , '18' , '19' , '20' , '21' , '22' , '23' , '24' , '25' , '26' , '27' , '28' , '29' , '30' , '31' , '32' , '33' , '34' , '35' , '36' , '37' , '38' , '39' )
AND sr.O_ORDERPRIORITY IN ('1-URGENT' , '2-high' , '3-Medium' )
#the baseline is =>


##oracle_05_2017-11-30.sql
SELECT PROD_NAME, CUST_CITY, SUM(DISTINCT COST) SCOST
FROM ORACLE_SALES, ORACLE_CUSTOMERS, ORACLE_PRODUCTS
WHERE ORACLE_SALES.CUST_ID = ORACLE_CUSTOMERS.CUST_ID
AND ORACLE_SALES.PROD_ID = ORACLE_PRODUCTS.PROD_ID
GROUP BY PROD_NAME, CUST_CITY WITH ROLLUP


##oracle_01_2017-11-30.sql
SELECT   YR, QTR, MON,CHN, S, 0 NS
FROM
    (SELECT DISTINCT CALENDAR_YEAR YR, CALENDAR_QUARTER_DESC QTR,
            CALENDAR_MONTH_DESC MON FROM ORACLE_TIMES) V2
      LEFT JOIN
    (
     SELECT CALENDAR_YEAR YR,CALENDAR_QUARTER_DESC QTR ,
            CALENDAR_MONTH_DESC MON,CHANNEL_ID CHN, SUM(AMOUNT) S
     FROM ORACLE_SALES S,ORACLE_TIMES T
     WHERE CHANNEL_ID IN ('S','I')
     AND S.TIME_ID = T.TIME_ID
     GROUP BY CALENDAR_YEAR,CALENDAR_QUARTER_DESC,CALENDAR_MONTH_DESC,CHANNEL_ID
    ) V1
      USING (YR, QTR, MON)
GROUP BY V1.CHN
ORDER BY 1,2,3,4


##oracle_01_2017-11-30.sql
SELECT   S.YEAR,V.MTH,CHN,AMT_SOLD,QTY_SOLD,AMT_SOLD  FROM
  (SELECT CALENDAR_YEAR YEAR,CALENDAR_MONTH_DESC MTH,CHANNEL_ID CHN,
       SUM(AMOUNT) AMT_SOLD
  FROM ORACLE_SALES S , ORACLE_TIMES T
  WHERE PROD_ID < 1000
  AND CALENDAR_YEAR = '1998'
  AND S.TIME_ID = T.TIME_ID
  GROUP BY CALENDAR_YEAR, CALENDAR_MONTH_DESC, CHANNEL_ID WITH ROLLUP) S
RIGHT OUTER JOIN
  (SELECT CALENDAR_YEAR YEAR,CALENDAR_MONTH_DESC MTH,SUM(QUANTITY_SOLD) QTY_SOLD
       FROM   ORACLE_SALES  S , ORACLE_TIMES T
  WHERE S.TIME_ID = T.TIME_ID
  GROUP BY CALENDAR_YEAR, CALENDAR_MONTH_DESC WITH ROLLUP
UNION
SELECT CALENDAR_YEAR YEAR,CALENDAR_MONTH_DESC MTH,SUM(QUANTITY_SOLD) QTY_SOLD
       FROM   ORACLE_SALES  S , ORACLE_TIMES T
  WHERE S.TIME_ID = T.TIME_ID
  GROUP BY CALENDAR_MONTH_DESC,CALENDAR_YEAR WITH ROLLUP
) V
ON (S.MTH = V.MTH)
WHERE S.YEAR=V.YEAR
GROUP BY YEAR
ORDER BY 1, 2, 3, 4, 5, 6



##oracle_01_2017-11-30.sql
SELECT
 	CUST_STATE_PROVINCE, CUST_CITY, SUM(DISTINCT AMOUNT)
   FROM ORACLE_SALES, ORACLE_CUSTOMERS
  WHERE ORACLE_SALES.CUST_ID = ORACLE_CUSTOMERS.CUST_ID
   AND ORACLE_CUSTOMERS.CUST_YEAR_OF_BIRTH = '1934'
   AND CUST_GENDER = 'F'
  GROUP BY CUST_STATE_PROVINCE, CUST_CITY WITH ROLLUP


##oracle_03_2017-11-30.sql
SELECT   YR, QTR, MON,CHN, S, 0 NS
FROM
(SELECT   DISTINCT CALENDAR_YEAR YR, CALENDAR_QUARTER_DESC QTR,
CALENDAR_MONTH_DESC MON FROM ORACLE_TIMES) V2
LEFT JOIN
(SELECT CALENDAR_YEAR YR,CALENDAR_QUARTER_DESC QTR ,
CALENDAR_MONTH_DESC MON,CHANNEL_ID CHN, SUM(AMOUNT) S
FROM ORACLE_SALES S,ORACLE_TIMES T
WHERE CHANNEL_ID IN ('S','I')
AND S.TIME_ID = T.TIME_ID
GROUP BY CALENDAR_YEAR,CALENDAR_QUARTER_DESC,CALENDAR_MONTH_DESC,CHANNEL_ID
) V1  USING (YR, QTR, MON)
GROUP BY V1.CHN
ORDER BY 1,2,3,4


##oracle_04_2017-11-30.sql
SELECT
    P.PROD_CATEGORY, C.CUST_STATE_PROVINCE, T.CALENDAR_YEAR,
    COUNT(DISTINCT PROD_NAME),
    COUNT( DISTINCT CUST_CITY),
    SUM(QUANTITY_SOLD)
   FROM ORACLE_SALES   S,
        ORACLE_PRODUCTS P,
        ORACLE_CUSTOMERS C,
        ORACLE_TIMES T,
        ORACLE_CHANNELS CH,
        ORACLE_PROMOTIONS PR
  WHERE S.PROD_ID = P.PROD_ID
    AND S.CUST_ID = C.CUST_ID
    AND S.TIME_ID = T.TIME_ID
    AND S.CHANNEL_ID = CH.CHANNEL_ID
    AND S.PROMO_ID = PR.PROMO_ID
  GROUP BY P.PROD_CATEGORY, C.CUST_STATE_PROVINCE, T.CALENDAR_YEAR WITH ROLLUP


##oracle_04_2017-11-30.sql
SELECT
    P.PROD_SUBCATEGORY, C.CUST_CITY, T.CALENDAR_QUARTER_DESC,
    COUNT(DISTINCT PROD_NAME),
    COUNT( DISTINCT CUST_CITY),
    SUM(QUANTITY_SOLD)
   FROM ORACLE_SALES   S,
        ORACLE_PRODUCTS P,
        ORACLE_CUSTOMERS C,
        ORACLE_TIMES T,
        ORACLE_CHANNELS CH,
        ORACLE_PROMOTIONS PR
  WHERE S.PROD_ID = P.PROD_ID
    AND S.CUST_ID = C.CUST_ID
    AND S.TIME_ID = T.TIME_ID
    AND S.CHANNEL_ID = CH.CHANNEL_ID
    AND S.PROMO_ID = PR.PROMO_ID
    AND C.CUST_STATE_PROVINCE IN ('NY','CA','AZ')
    AND P.PROD_CATEGORY = 'MEN'
    AND T.CALENDAR_YEAR IN (1999, 2000)
    AND CH.CHANNEL_CLASS = 'DIRECT'
    AND PR.PROMO_CATEGORY IN ( 'NEWSPAPER', 'INTERNET', 'MAGAZINE')
  GROUP BY P.PROD_SUBCATEGORY, C.CUST_CITY, T.CALENDAR_QUARTER_DESC WITH ROLLUP


##oracle_04_2017-11-30.sql
SELECT
   P.PROD_SUBCATEGORY, C.CUST_CITY, T.CALENDAR_QUARTER_DESC,
   COUNT(DISTINCT PROD_NAME),
   COUNT( DISTINCT CUST_CITY),
   SUM(QUANTITY_SOLD)
  FROM ORACLE_SALES   S,
       ORACLE_PRODUCTS   P,
       ORACLE_CUSTOMERS   C,
       ORACLE_TIMES   T,
       ORACLE_CHANNELS   CH,
       ORACLE_PROMOTIONS   PR
 WHERE S.PROD_ID = P.PROD_ID
   AND S.CUST_ID = C.CUST_ID
   AND S.TIME_ID = T.TIME_ID
   AND S.CHANNEL_ID = CH.CHANNEL_ID
   AND S.PROMO_ID = PR.PROMO_ID
   AND C.CUST_STATE_PROVINCE IN ('NY','CA','AZ')
   AND P.PROD_CATEGORY = 'MEN'
   AND T.CALENDAR_YEAR IN (1999, 2000)
   AND CH.CHANNEL_CLASS = 'Direct'
   AND PR.PROMO_CATEGORY IN ( 'newspaper', 'internet', 'magazine')
 GROUP BY P.PROD_SUBCATEGORY, C.CUST_CITY, T.CALENDAR_QUARTER_DESC WITH ROLLUP


##oracle_03_2017-11-30.sql
SELECT   S.YEAR,V.MTH,CHN,AMT_SOLD,QTY_SOLD,AMT_SOLD  FROM
 (SELECT CALENDAR_YEAR YEAR,CALENDAR_MONTH_DESC MTH,CHANNEL_ID CHN,
 SUM(AMOUNT) AMT_SOLD
 FROM ORACLE_SALES S , ORACLE_TIMES T
 WHERE PROD_ID < 1000
 AND CALENDAR_YEAR = '1998'
 AND S.TIME_ID = T.TIME_ID
 GROUP BY CALENDAR_YEAR, CALENDAR_MONTH_DESC, CHANNEL_ID WITH ROLLUP) S
 RIGHT OUTER JOIN
 (SELECT CALENDAR_YEAR YEAR,CALENDAR_MONTH_DESC MTH,SUM(QUANTITY_SOLD) QTY_SOLD
 FROM   ORACLE_SALES  S , ORACLE_TIMES T  WHERE S.TIME_ID = T.TIME_ID
 GROUP BY CALENDAR_YEAR, CALENDAR_MONTH_DESC WITH ROLLUP
 UNION
 SELECT CALENDAR_YEAR YEAR,CALENDAR_MONTH_DESC MTH,SUM(QUANTITY_SOLD) QTY_SOLD
 FROM   ORACLE_SALES  S , ORACLE_TIMES T WHERE S.TIME_ID = T.TIME_ID
 GROUP BY  CALENDAR_MONTH_DESC,CALENDAR_YEAR WITH ROLLUP
 ) V
 ON (S.MTH = V.MTH)
 WHERE S.YEAR=V.YEAR
 GROUP BY YEAR
 ORDER BY 1, 2, 3, 4, 5, 6


##oracle_03_2017-11-30.sql
SELECT   PROD_ID PID,CUID,TIME_ID TID,CID,PRID,QTY  FROM
(SELECT * FROM ORACLE_PRODUCTS WHERE PROD_ID < 100) C
LEFT OUTER JOIN
(SELECT CUST_ID CUID, PROD_ID ,TIME_ID ,CHANNEL_ID CID,PROMO_ID PRID,
QUANTITY_SOLD QTY, AMOUNT AMT, COST UC
FROM ORACLE_SALES S
WHERE S.PROD_ID < 50) V
USING(PROD_ID)
GROUP BY V.CID,V.PRID
ORDER BY 1,2,3,4


##oracle_02_2017-11-30.sql
SELECT    ALL_CUST_GENDER,
         SUBSTR(ALL_PROD_SUBCAT_DESC,1,20),
         SUM(ALL_AMOUNT),
          COUNT(ALL_AMOUNT),
       SUM(DISTINCT ALL_AMOUNT), SUM(DISTINCT ALL_QUANTITY_SOLD)
FROM (SELECT  ALL_CUST_GENDER,
              ALL_PROD_SUBCAT_DESC,
              ALL_AMOUNT,
              ALL_QUANTITY_SOLD,
              ALL_CUST_ID,
              ALL_PROD_ID,
              ALL_TIME_ID,
              ALL_PROMO_ID
FROM
((SELECT CUST_GENDER AS ALL_CUST_GENDER,
               PROD_SUBCAT_DESC AS ALL_PROD_SUBCAT_DESC,
               AMOUNT AS ALL_AMOUNT,
               QUANTITY_SOLD AS ALL_QUANTITY_SOLD,
               C.CUST_ID AS ALL_CUST_ID,
               P.PROD_ID AS ALL_PROD_ID,
               T.TIME_ID AS ALL_TIME_ID,
               PR.PROMO_ID AS ALL_PROMO_ID
        FROM ORACLE_SALES S, ORACLE_CUSTOMERS C, ORACLE_PRODUCTS P, ORACLE_TIMES T, ORACLE_PROMOTIONS PR
        WHERE S.CUST_ID = C.CUST_ID
        AND S.TIME_ID = T.TIME_ID
        AND S.PROMO_ID = PR.PROMO_ID
        AND S.PROD_ID = P.PROD_ID
        AND SUPPLIER_ID <= 7000
        AND CUST_YEAR_OF_BIRTH <= 1999)
        UNION ALL
       (SELECT  ORACLE_CUSTOMERS.CUST_GENDER AS ALL_CUST_GENDER,
               ORACLE_PRODUCTS.PROD_SUBCAT_DESC AS ALL_PROD_SUBCAT_DESC,
               ORACLE_SALES.AMOUNT AS ALL_QUANTITY_SOLD,
               ORACLE_SALES.QUANTITY_SOLD AS ALL_QUANTITY_SOLD,
               ORACLE_CUSTOMERS.CUST_ID AS ALL_CUST_ID,
               ORACLE_PRODUCTS.PROD_ID AS ALL_PROD_ID,
               ORACLE_TIMES.TIME_ID AS ALL_TIME_ID,
               ORACLE_PROMOTIONS.PROMO_ID  AS ALL_PROMO_ID
         FROM ORACLE_SALES, ORACLE_CUSTOMERS, ORACLE_TIMES, ORACLE_PRODUCTS, ORACLE_PROMOTIONS
         WHERE ORACLE_SALES.CUST_ID = ORACLE_CUSTOMERS.CUST_ID
         AND ORACLE_SALES.TIME_ID = ORACLE_TIMES.TIME_ID
         AND ORACLE_SALES.PROMO_ID = ORACLE_PROMOTIONS.PROMO_ID
         AND ORACLE_SALES.PROD_ID = ORACLE_PRODUCTS.PROD_ID
         AND ORACLE_TIMES.DAYS_IN_CAL_MONTH > 30
         AND ORACLE_SALES.PROD_ID BETWEEN 2000 AND 5000)
) AS A
GROUP BY ALL_CUST_GENDER,
         ALL_PROD_SUBCAT_DESC,
         ALL_AMOUNT,
         ALL_QUANTITY_SOLD,
         ALL_CUST_ID,
         ALL_PROD_ID,
         ALL_TIME_ID,
         ALL_PROMO_ID
HAVING count(*)>1
) AS B
GROUP BY ALL_CUST_GENDER, SUBSTR(ALL_PROD_SUBCAT_DESC,1,20) WITH ROLLUP


##zsh_1_2017-04-30.sql
SELECT o.o_orderkey,
(SELECT IFNULL(SUM(L_EXTENDEDPRICE),0)
 FROM aa_lineitem AS h
 WHERE 		h.l_commitdate = o.l_commitdate 		AND h.l_orderkey = o.o_orderkey
 ) AS L_EXTENDEDPRICE
FROM
(SELECT aa_lineitem.l_commitdate, IFNULL(SUM(aa_partsupp.PS_AVAILQTY),0) AS amountCal, 	aa_orders.o_orderkey
 FROM aa_lineitem LEFT JOIN aa_orders ON aa_lineitem.l_orderkey = aa_orders.o_orderkey
 LEFT JOIN aa_partsupp ON aa_lineitem.l_partkey = aa_partsupp.ps_partkey and aa_lineitem.l_suppkey = aa_partsupp.ps_suppkey group by aa_lineitem.l_commitdate,o_orderkey)as o order by 1,2 limit 10,30


##between_2017-01-20.sql
select id,boolean_test from test where boolean_test between 1 and 0 order by id limit 100

##between_2017-03-10.sql
select count(*) from test a join (select * from mpp_test_tb where string_test like 'a%' ) tmp on a.id=tmp.id where a.boolean_test between 0 and 1

##between_2017-03-10.sql
select count(*) from test a join (select * from mpp_test_tb where string_test like 'a%' ) tmp on a.id=tmp.id where a.boolean_test not between 0 and 1

##op_type_2017-04-30.sql
select id  from test natural join teacher  where id =(select int_test from test_datatype_list where id=3) order by 1

##op_type_2017-04-30.sql
select id  from test natural join teacher  where id <=> (select int_test from test_datatype_list where id=3) order by 1


##op_type_2017-04-30.sql
select id  from test natural join teacher  where id != (select int_test from test_datatype_list where id=3) order by 1


##op_type_2017-04-30.sql
select id  from test natural join teacher  where id <> (select int_test from test_datatype_list where id=3) order by 1

##op_type_2017-04-30.sql
select id  from test natural join teacher  where id < (select int_test from test_datatype_list where id=3) order by 1


##op_type_2017-04-30.sql
select id  from test natural join teacher  where id <= (select int_test from test_datatype_list where id=3) order by 1


##op_type_2017-04-30.sql
select id  from test natural join teacher  where id >= (select int_test from test_datatype_list where id=3) order by 1

##op_type_2017-04-30.sql
select id  from test natural join teacher  where id > (select int_test from test_datatype_list where id=3) order by 1


##group_by_2017-01-20.sql
select string_test , date_test, avg(bitmap_test) res from test natural join mpp_test_tb group by string_test,date_test having res <=0  order by 3,2,1


##broadcast_subquery_2017-01-20.sql
select t1.sid,t2.id from (select sid from grade where sid >10 and id >150 ) t1 join (select id from not_rt where int_test >10 and string_test like '%a%' and boolean_test in(0,1) ) t2 on t1.sid=t2.id order by t1.sid,t2.id

##select_2017-01-20.sql
select id,byte_test,boolean_test from test where boolean_test<1 order by id limit 100


##select_2017-01-20.sql
select id,byte_test,boolean_test from test where boolean_test between 1 and 0 order by id limit 100;

##select_2017-01-20.sql
select id,byte_test,boolean_test from test where boolean_test>0 order by id limit 100;

##select_2017-01-20.sql
select id, id, boolean_test from test order by id limit 10


##select_2017-01-20.sql
select id, boolean_test, id, id, boolean_test, int_test from test order by id limit 10


##select_2017-01-20.sql
select a.id, id from test as a order by id limit 10


##select_2017-01-20.sql
select id, id, count(*) from test where id between 10 and 100 group by id order by id limit 10


##select_2017-01-20.sql
select id, boolean_test, id, id, boolean_test, int_test, count(*) from test where id between 10 and 100  group by id, boolean_test, int_test order by  id, boolean_test, int_test  limit 100


##select_2017-01-20.sql
select id, boolean_test, id, id, boolean_test, int_test, count(*) from  test where id between 10 and 100 group by int_test, id, boolean_test order by int_test, id, boolean_test limit 100

##select_2017-01-20.sql
select id, boolean_test,id from test where id between 10 and 100  order by short_test,id, boolean_test

##select_2017-01-20.sql
select id, boolean_test,id from  test where id between 10 and 100 order by short_test,id, boolean_test desc

##select_2017-01-20.sql
select boolean_test,id, id from  test where id between 10 and 100 order by id desc

##select_2017-01-20.sql
select id, boolean_test, id, id, boolean_test, int_test from  test where id between 10 and 100  order by boolean_test, id, int_test

##select_2017-01-20.sql
select id, boolean_test, id, id, boolean_test, int_test, count(*) from  test where id between 10 and 100   group by int_test, id, boolean_test order by id,int_test,boolean_test


##bit_2017-01-20.sql
select int_test | long_test from test where int_test >=0 and long_test >=0 and id>0 and id<500 order by id


##bit_2017-01-20.sql
select int_test | long_test from test where int_test >=0 and long_test >=0 and id>0 and id<500 order by id limit 50

##bit_2017-01-20.sql
select int_test | byte_test from test where int_test >=0 and byte_test >=0  order by id limit 50

##bit_2017-01-20.sql
select int_test | short_test from test where int_test >=0 and short_test >=0 order by id limit 50


##bit_2017-01-20.sql
select int_test | float_test from test where int_test >=0 and float_test >=0 order by id limit 50

##bit_2017-01-20.sql
select int_test | double_test from test where int_test >=0 and double_test >=0  order by id limit 50


##bit_2017-01-20.sql
select int_test | 5 from test where int_test >=0 and byte_test >=0  order by id

##bit_2017-01-20.sql
select int_test | 5.3 from test where int_test >=0 and short_test >=0 order by id

##bit_2017-01-20.sql
select int_test | 8.25235625525 from test where int_test >=0 and float_test >=0 order by id

##bit_2017-01-20.sql
select int_test ,id from test where int_test >=0 and int_test | long_test=4 order by id


##bit_2017-01-20.sql
select int_test ,id from test where int_test >=0 and int_test | 12=12 order by id


##bit_2017-01-20.sql
select int_test,id from test where int_test >=0 and long_test >=0 and int_test & long_test|14 ^ 52 =58   order by id
#the baseline is =>
int_test|id|
922|23|
76|42|
775|88|
267|97|
314|122|
424|130|
244|146|
160|153|
434|172|
531|189|
162|203|
467|243|
922|248|
242|250|
254|257|
386|364|
318|375|
423|387|
26|404|
358|445|
824|454|
174|460|
433|523|
426|627|
369|685|
824|719|
419|731|
671|773|
158|778|
190|819|
175|828|
634|832|
778|858|
648|891|
680|911|
305|923|
690|953|
69|960|
129|963|
831|995|
#current execute result is =>
 class org.apache.calcite.sql.SqlBinaryOperator: |

##bit_2017-01-20.sql
select int_test,id from test where int_test >=0 and long_test >=0 and int_test & long_test ^ 52|14  =58   order by id
#the baseline is =>
int_test|id|
#current execute result is =>
 class org.apache.calcite.sql.SqlBinaryOperator: |

##bit_2017-01-20.sql
select int_test,id from test where int_test >=0 and long_test >=0 and int_test & 42 ^ 52|14  =14   order by id
#the baseline is =>
int_test|id|
357|15|
772|16|
76|42|
427|61|
865|70|
108|83|
775|88|
201|91|
267|97|
804|102|
771|113|
424|130|
160|153|
774|168|
323|187|
713|191|
577|193|
800|200|
162|203|
878|234|
802|267|
578|272|
747|273|
714|283|
106|286|
613|303|
967|309|
430|316|
266|347|
233|351|
740|353|
386|359|
386|364|
423|387|
878|388|
609|425|
67|426|
736|443|
358|445|
580|451|
265|453|
972|459|
174|460|
207|479|
105|483|
804|484|
196|497|
524|524|
619|529|
815|539|
549|551|
165|574|
326|577|
675|584|
739|590|
495|609|
653|614|
426|627|
295|637|
47|638|
971|674|
878|702|
139|713|
419|731|
867|743|
193|765|
834|771|
809|781|
970|797|
132|823|
175|828|
449|842|
774|850|
419|854|
195|857|
778|858|
942|867|
647|868|
874|874|
4|875|
234|882|
648|891|
37|897|
512|903|
680|911|
549|912|
516|936|
69|960|
129|963|
931|968|
877|978|
418|990|
174|991|
610|992|
201|1000|
#current execute result is =>
 class org.apache.calcite.sql.SqlBinaryOperator: |

##bit_2017-01-20.sql
select int_test,id,int_test & long_test|14 ^ 52 from test where int_test >=0 and long_test >=0 order by id
#the baseline is =>
int_test|id|int_test & long_test|14 ^ 52|
442|4|442|
357|15|59|
772|16|830|
922|23|58|
368|41|378|
76|42|58|
861|47|123|
272|49|314|
475|54|59|
221|59|254|
427|61|443|
758|62|126|
510|67|254|
865|70|634|
637|81|635|
108|83|122|
775|88|58|
946|89|826|
201|91|122|
267|97|58|
804|102|314|
771|113|827|
949|121|959|
314|122|58|
787|124|59|
281|127|59|
424|130|58|
244|146|58|
160|153|58|
828|162|826|
774|168|570|
434|172|58|
505|173|379|
323|187|59|
850|188|826|
531|189|58|
713|191|698|
577|193|59|
724|195|570|
800|200|826|
162|203|58|
208|209|250|
407|211|442|
338|214|122|
848|228|634|
878|234|318|
467|243|58|
922|248|58|
242|250|58|
254|257|58|
802|267|570|
578|272|634|
747|273|186|
714|283|634|
106|286|122|
819|290|59|
613|303|126|
446|307|446|
967|309|954|
430|316|314|
763|319|570|
266|347|314|
233|351|250|
740|353|574|
386|359|442|
625|361|59|
531|362|570|
386|364|58|
766|366|250|
318|375|58|
423|387|58|
878|388|62|
476|398|446|
26|404|58|
214|408|190|
627|417|634|
630|420|634|
609|425|123|
67|426|59|
797|429|318|
537|436|59|
736|443|698|
358|445|58|
668|449|190|
580|451|570|
265|453|315|
824|454|58|
972|459|830|
174|460|58|
308|473|62|
207|479|127|
105|483|122|
804|484|826|
196|497|254|
602|514|570|
338|520|122|
433|523|58|
524|524|574|
619|529|122|
815|539|830|
114|542|122|
549|551|62|
341|569|379|
165|574|63|
326|577|382|
675|584|570|
80|585|122|
917|587|574|
739|590|59|
790|592|62|
495|609|126|
653|614|191|
223|622|191|
541|624|574|
426|627|58|
856|628|634|
497|633|186|
295|637|315|
47|638|63|
535|649|59|
467|651|250|
632|656|570|
971|674|123|
369|685|58|
985|686|699|
878|702|318|
139|713|187|
824|719|58|
789|721|571|
419|731|58|
701|738|190|
867|743|122|
124|748|62|
571|753|59|
954|760|954|
193|765|122|
254|767|254|
834|771|378|
671|773|58|
443|776|315|
158|778|58|
809|781|826|
767|786|250|
820|789|314|
970|797|506|
917|800|315|
190|819|58|
132|823|190|
175|828|58|
146|830|186|
634|832|58|
449|842|250|
285|847|314|
774|850|826|
419|854|59|
195|857|122|
778|858|58|
852|863|826|
942|867|702|
647|868|703|
874|874|826|
4|875|62|
234|882|186|
794|883|826|
247|888|186|
671|890|702|
648|891|58|
37|897|63|
828|902|574|
512|903|570|
680|911|58|
549|912|574|
305|923|58|
797|924|571|
889|931|827|
516|936|62|
537|939|59|
639|947|123|
753|948|763|
690|953|58|
988|956|382|
69|960|58|
213|961|123|
129|963|58|
931|968|442|
877|978|122|
912|981|314|
253|982|126|
418|990|314|
174|991|62|
610|992|122|
410|994|314|
831|995|58|
201|1000|59|
#current execute result is =>
 class org.apache.calcite.sql.SqlBinaryOperator: |

##bit_2017-01-20.sql
select int_test,id from test where int_test >=0 and long_test >=0 and int_test & long_test|14 ^ 52  >> 5=33   order by id
#the baseline is =>
int_test|id|
357|15|
160|153|
625|361|
824|719|
419|854|
#current execute result is =>
 class org.apache.calcite.sql.SqlBinaryOperator: |

##bit_2017-01-20.sql
select int_test,id from test where int_test >=0 and long_test >=0 and int_test & long_test|14 ^ 52  << 5=1866   order by id
#the baseline is =>
int_test|id|
922|23|
267|97|
714|283|
174|460|
778|858|
#current execute result is =>
 class org.apache.calcite.sql.SqlBinaryOperator: |

##order_2017-01-20.sql
select distinct string_test from test where id>9647 ORDER BY id limit 100
#the baseline is =>
string_test|
#current execute result is =>
 Expression 'FIRST_VALUE(`TEST`.`id`)' is not in the select clause

##constant_2017-01-20.sql
select 8*8.1+2.4,int_test from test order by id  limit 10
#the baseline is =>
8*8.1+2.4|int_test|
67.2|-214|
67.2|7|
67.2|null|
67.2|442|
67.2|-170|
67.2|-58|
67.2|-40|
67.2|-911|
67.2|-706|
67.2|null|
#current execute result is =>
8 * 8.1 + 2.4|int_test|
67.00000|-214|
67.00000|7|
67.00000|null|
67.00000|442|
67.00000|-170|
67.00000|-58|
67.00000|-40|
67.00000|-911|
67.00000|-706|
67.00000|null|

##not_2017-01-20.sql
select string_test from test where string_test !=true order by  string_test limit 50
#the baseline is =>
string_test|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
abdfeed|
abdfeed|
abdfeed|
abdfeed|
abdfeed|
abdfeed|
#current execute result is =>
 type convert error, cann't convert =>he343243, fromType=>STRING toType=>BOOLEAN

##not_2017-01-20.sql
select t1.sid,t2.id from (select sid from grade where sid >10 and id >150 ) t1 join (select id from test where int_test >10 and string_test like '%a%' and boolean_test in(0,1) and  boolean_test !=0 ) t2 on t1.sid=t2.id order by t1.sid,t2.id
#the baseline is =>
sid|id|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
#current execute result is =>
 Values passed to IN operator must have compatible types

##subquery_type_2017-03-10.sql
select int_test,id,id,timestamp_test,int_test from test  where int_test in(SELECT int_test from mpp_test_tb where int_test>10 and string_test like '%a%' or date_test='2014-01-01' and float_test=0.5 or int_test<12) ORDER BY int_test,id,timestamp_test limit 20
#the baseline is =>
int_test|id|id|timestamp_test|int_test|
-978|507|507|2013-04-04 06:34:12.0|-978|
-959|975|975|2013-04-04 06:34:12.0|-959|
-956|536|536|2011-06-21 09:12:28.0|-956|
-952|534|534|2014-02-11 11:23:45.0|-952|
-919|19|19|2014-02-11 11:23:45.0|-919|
-903|996|996|2013-03-21 09:17:28.0|-903|
-875|545|545|2017-01-24 20:00:00.0|-875|
-867|71|71|2011-12-22 12:12:12.0|-867|
-867|560|560|2013-09-01 14:47:28.0|-867|
-856|56|56|2017-03-21 07:47:28.0|-856|
-854|30|30|2017-03-21 07:47:28.0|-854|
-839|28|28|2014-02-11 11:23:45.0|-839|
-815|481|481|2010-02-21 18:35:23.0|-815|
-780|503|503|2010-02-21 18:35:23.0|-780|
-756|528|528|2015-11-22 08:02:45.0|-756|
-714|53|53|2012-12-12 12:23:00.0|-714|
-714|259|259|2011-12-22 12:12:12.0|-714|
-714|403|403|2010-02-21 18:35:23.0|-714|
-707|505|505|2017-01-24 20:00:00.0|-707|
-706|9|9|2014-02-11 11:23:45.0|-706|
#current execute result is =>
 Column 'int_test' is ambiguous

##subquery_in_where_2017-01-20.sql
select int_test,id,id,timestamp_test,int_test from test   where id in(SELECT id from test where int_test>10 and string_test like '%a%' or date_test='2014-01-01' and float_test=0.5 or int_test<12) ORDER BY int_test,id,timestamp_test
#the baseline is =>
int_test|id|id|timestamp_test|int_test|
-997|794|794|2017-03-21 07:47:28.0|-997|
-996|910|910|2015-11-22 08:02:45.0|-996|
-995|155|155|2011-12-22 12:12:12.0|-995|
-994|109|109|2017-01-24 20:00:00.0|-994|
-991|749|749|2015-11-22 08:02:45.0|-991|
-987|620|620|2014-05-25 20:12:12.0|-987|
-987|682|682|2015-12-01 15:23:34.0|-987|
-984|77|77|2013-02-04 12:27:32.0|-984|
-979|433|433|2015-11-22 08:02:45.0|-979|
-978|507|507|2013-04-04 06:34:12.0|-978|
-976|294|294|2013-03-21 09:17:28.0|-976|
-976|335|335|2013-03-21 09:17:28.0|-976|
-973|690|690|2013-03-21 09:17:28.0|-973|
-970|220|220|2013-02-04 12:27:32.0|-970|
-965|254|254|2013-09-01 14:47:28.0|-965|
-962|763|763|2013-04-04 06:34:12.0|-962|
-961|810|810|2017-01-24 20:00:00.0|-961|
-960|63|63|2017-01-24 20:00:00.0|-960|
-960|368|368|2017-01-24 20:00:00.0|-960|
-959|975|975|2013-04-04 06:34:12.0|-959|
-958|659|659|2010-02-21 18:35:23.0|-958|
-958|703|703|2014-05-25 20:12:12.0|-958|
-956|536|536|2011-06-21 09:12:28.0|-956|
-954|556|556|2015-12-01 15:23:34.0|-954|
-952|534|534|2014-02-11 11:23:45.0|-952|
-951|154|154|2012-12-12 12:23:00.0|-951|
-950|171|171|2003-04-04 12:23:34.0|-950|
-946|415|415|2010-02-21 18:35:23.0|-946|
-943|197|197|2013-09-01 14:47:28.0|-943|
-942|223|223|2011-12-22 12:12:12.0|-942|
-940|372|372|2017-01-24 20:00:00.0|-940|
-939|205|205|2017-03-21 07:47:28.0|-939|
-936|58|58|2013-02-04 12:27:32.0|-936|
-936|116|116|2017-03-21 07:47:28.0|-936|
-936|399|399|2013-04-04 06:34:12.0|-936|
-932|176|176|2015-12-01 15:23:34.0|-932|
-931|670|670|2014-02-11 11:23:45.0|-931|
-926|344|344|2015-12-01 15:23:34.0|-926|
-920|413|413|2013-09-01 14:47:28.0|-920|
-920|813|813|2017-03-21 07:47:28.0|-920|
-919|19|19|2014-02-11 11:23:45.0|-919|
-916|161|161|2013-03-21 09:17:28.0|-916|
-912|278|278|2010-02-21 18:35:23.0|-912|
-911|8|8|2015-12-01 15:23:34.0|-911|
-911|96|96|2017-03-21 07:47:28.0|-911|
-904|269|269|2013-09-01 14:47:28.0|-904|
-903|996|996|2013-03-21 09:17:28.0|-903|
-900|93|93|2003-04-04 12:23:34.0|-900|
-899|814|814|2003-04-04 12:23:34.0|-899|
-899|942|942|2017-01-24 20:00:00.0|-899|
-896|652|652|2014-02-11 11:23:45.0|-896|
-892|424|424|2013-04-04 06:34:12.0|-892|
-892|658|658|2011-12-22 12:12:12.0|-892|
-892|851|851|2014-02-11 11:23:45.0|-892|
-888|546|546|2013-03-21 09:17:28.0|-888|
-888|630|630|2013-04-04 06:34:12.0|-888|
-881|538|538|2014-05-25 20:12:12.0|-881|
-877|48|48|2017-03-21 07:47:28.0|-877|
-876|249|249|2013-02-04 12:27:32.0|-876|
-875|545|545|2017-01-24 20:00:00.0|-875|
-874|229|229|2017-01-24 20:00:00.0|-874|
-872|671|671|2012-12-12 12:23:00.0|-872|
-870|740|740|2017-03-21 07:47:28.0|-870|
-867|71|71|2011-12-22 12:12:12.0|-867|
-867|560|560|2013-09-01 14:47:28.0|-867|
-866|718|718|2003-04-04 12:23:34.0|-866|
-862|693|693|2010-02-21 18:35:23.0|-862|
-861|933|933|2003-04-04 12:23:34.0|-861|
-860|679|679|2012-12-12 12:23:00.0|-860|
-858|150|150|2014-02-11 11:23:45.0|-858|
-856|56|56|2017-03-21 07:47:28.0|-856|
-855|291|291|2015-11-22 08:02:45.0|-855|
-854|30|30|2017-03-21 07:47:28.0|-854|
-839|28|28|2014-02-11 11:23:45.0|-839|
-838|410|410|2013-09-01 14:47:28.0|-838|
-835|625|625|2012-12-12 12:23:00.0|-835|
-828|666|666|2014-02-11 11:23:45.0|-828|
-827|621|621|2012-12-12 12:23:00.0|-827|
-824|224|224|2003-04-04 12:23:34.0|-824|
-821|973|973|2014-02-11 11:23:45.0|-821|
-815|481|481|2010-02-21 18:35:23.0|-815|
-814|304|304|2013-09-01 14:47:28.0|-814|
-813|589|589|2015-11-22 08:02:45.0|-813|
-812|561|561|2011-12-22 12:12:12.0|-812|
-811|134|134|2014-05-25 20:12:12.0|-811|
-810|289|289|2017-01-24 20:00:00.0|-810|
-809|373|373|2012-12-12 12:23:00.0|-809|
-809|573|573|2013-03-21 09:17:28.0|-809|
-809|612|612|2010-02-21 18:35:23.0|-809|
-806|160|160|2011-06-21 09:12:28.0|-806|
-806|639|639|2010-02-21 18:35:23.0|-806|
-795|808|808|2010-02-21 18:35:23.0|-795|
-791|876|876|2015-11-22 08:02:45.0|-791|
-791|980|980|2014-05-25 20:12:12.0|-791|
-781|750|750|2012-12-12 12:23:00.0|-781|
-780|503|503|2010-02-21 18:35:23.0|-780|
-779|488|488|2017-03-21 07:47:28.0|-779|
-777|174|174|2011-06-21 09:12:28.0|-777|
-772|930|930|2011-06-21 09:12:28.0|-772|
-771|110|110|2017-03-21 07:47:28.0|-771|
-770|450|450|2013-02-04 12:27:32.0|-770|
-770|486|486|2010-02-21 18:35:23.0|-770|
-770|840|840|2013-09-01 14:47:28.0|-770|
-762|384|384|2014-02-11 11:23:45.0|-762|
-760|391|391|2003-04-04 12:23:34.0|-760|
-757|764|764|2013-04-04 06:34:12.0|-757|
-756|528|528|2015-11-22 08:02:45.0|-756|
-753|608|608|2010-02-21 18:35:23.0|-753|
-751|178|178|2010-02-21 18:35:23.0|-751|
-744|798|798|2013-04-04 06:34:12.0|-744|
-743|472|472|2011-06-21 09:12:28.0|-743|
-743|663|663|2003-04-04 12:23:34.0|-743|
-729|131|131|2010-02-21 18:35:23.0|-729|
-724|82|82|2013-03-21 09:17:28.0|-724|
-720|855|855|2012-12-12 12:23:00.0|-720|
-716|395|395|2012-12-12 12:23:00.0|-716|
-714|53|53|2012-12-12 12:23:00.0|-714|
-714|259|259|2011-12-22 12:12:12.0|-714|
-714|403|403|2010-02-21 18:35:23.0|-714|
-713|916|916|2010-02-21 18:35:23.0|-713|
-708|73|73|2013-02-04 12:27:32.0|-708|
-707|505|505|2017-01-24 20:00:00.0|-707|
-706|9|9|2014-02-11 11:23:45.0|-706|
-703|672|672|2014-05-25 20:12:12.0|-703|
-703|871|871|2013-03-21 09:17:28.0|-703|
-700|491|491|2013-09-01 14:47:28.0|-700|
-700|836|836|2014-02-11 11:23:45.0|-700|
-698|567|567|2015-12-01 15:23:34.0|-698|
-696|769|769|2013-09-01 14:47:28.0|-696|
-694|518|518|2003-04-04 12:23:34.0|-694|
-693|678|678|2011-12-22 12:12:12.0|-693|
-691|611|611|2014-05-25 20:12:12.0|-691|
-688|334|334|2013-04-04 06:34:12.0|-688|
-685|557|557|2015-11-22 08:02:45.0|-685|
-683|32|32|2014-02-11 11:23:45.0|-683|
-683|591|591|2015-12-01 15:23:34.0|-683|
-682|848|848|2015-12-01 15:23:34.0|-682|
-680|166|166|2014-02-11 11:23:45.0|-680|
-676|198|198|2013-03-21 09:17:28.0|-676|
-674|98|98|2014-02-11 11:23:45.0|-674|
-673|774|774|2012-12-12 12:23:00.0|-673|
-670|324|324|2017-03-21 07:47:28.0|-670|
-669|14|14|2013-09-01 14:47:28.0|-669|
-668|699|699|2017-01-24 20:00:00.0|-668|
-668|869|869|2017-03-21 07:47:28.0|-668|
-666|803|803|2017-03-21 07:47:28.0|-666|
-665|861|861|2003-04-04 12:23:34.0|-665|
-660|167|167|2012-12-12 12:23:00.0|-660|
-657|365|365|2011-06-21 09:12:28.0|-657|
-657|414|414|2013-09-01 14:47:28.0|-657|
-656|493|493|2015-11-22 08:02:45.0|-656|
-653|397|397|2017-03-21 07:47:28.0|-653|
-653|653|653|2011-12-22 12:12:12.0|-653|
-651|18|18|2003-04-04 12:23:34.0|-651|
-651|496|496|2003-04-04 12:23:34.0|-651|
-650|240|240|2013-04-04 06:34:12.0|-650|
-649|27|27|2017-01-24 20:00:00.0|-649|
-648|68|68|2010-02-21 18:35:23.0|-648|
-647|297|297|2013-09-01 14:47:28.0|-647|
-645|33|33|2014-02-11 11:23:45.0|-645|
-645|332|332|2011-12-22 12:12:12.0|-645|
-641|751|751|2013-09-01 14:47:28.0|-641|
-639|360|360|2015-12-01 15:23:34.0|-639|
-638|382|382|2013-03-21 09:17:28.0|-638|
-635|114|114|2010-02-21 18:35:23.0|-635|
-633|870|870|2015-12-01 15:23:34.0|-633|
-630|123|123|2013-03-21 09:17:28.0|-630|
-627|170|170|2014-02-11 11:23:45.0|-627|
-624|521|521|2010-02-21 18:35:23.0|-624|
-624|711|711|2013-09-01 14:47:28.0|-624|
-623|341|341|2013-02-04 12:27:32.0|-623|
-619|380|380|2011-12-22 12:12:12.0|-619|
-619|668|668|2017-03-21 07:47:28.0|-619|
-618|85|85|2003-04-04 12:23:34.0|-618|
-611|46|46|2003-04-04 12:23:34.0|-611|
-608|553|553|2003-04-04 12:23:34.0|-608|
-608|976|976|2014-05-25 20:12:12.0|-608|
-604|661|661|2014-02-11 11:23:45.0|-604|
-604|714|714|2013-02-04 12:27:32.0|-604|
-604|796|796|2015-12-01 15:23:34.0|-604|
-602|646|646|2013-04-04 06:34:12.0|-602|
-600|393|393|2013-03-21 09:17:28.0|-600|
-595|756|756|2013-04-04 06:34:12.0|-595|
-594|277|277|2011-06-21 09:12:28.0|-594|
-594|827|827|2014-05-25 20:12:12.0|-594|
-593|103|103|2013-04-04 06:34:12.0|-593|
-590|444|444|2013-04-04 06:34:12.0|-590|
-589|260|260|2015-11-22 08:02:45.0|-589|
-588|251|251|2013-02-04 12:27:32.0|-588|
-583|358|358|2012-12-12 12:23:00.0|-583|
-581|822|822|2015-11-22 08:02:45.0|-581|
-579|998|998|2012-12-12 12:23:00.0|-579|
-577|673|673|2017-01-24 20:00:00.0|-577|
-576|192|192|2017-01-24 20:00:00.0|-576|
-573|12|12|2003-04-04 12:23:34.0|-573|
-566|565|565|2010-02-21 18:35:23.0|-566|
-562|655|655|2011-06-21 09:12:28.0|-562|
-561|772|772|2014-02-11 11:23:45.0|-561|
-561|788|788|2013-03-21 09:17:28.0|-561|
-555|226|226|2013-02-04 12:27:32.0|-555|
-555|766|766|2013-04-04 06:34:12.0|-555|
-549|928|928|2003-04-04 12:23:34.0|-549|
-547|566|566|2010-02-21 18:35:23.0|-547|
-546|676|676|2014-02-11 11:23:45.0|-546|
-545|159|159|2013-03-21 09:17:28.0|-545|
-544|133|133|2017-03-21 07:47:28.0|-544|
-543|369|369|2015-11-22 08:02:45.0|-543|
-542|300|300|2010-02-21 18:35:23.0|-542|
-538|629|629|2012-12-12 12:23:00.0|-538|
-537|419|419|2012-12-12 12:23:00.0|-537|
-528|775|775|2013-03-21 09:17:28.0|-528|
-524|632|632|2017-01-24 20:00:00.0|-524|
-523|441|441|2015-12-01 15:23:34.0|-523|
-522|434|434|2013-03-21 09:17:28.0|-522|
-521|907|907|2017-03-21 07:47:28.0|-521|
-520|11|11|2015-12-01 15:23:34.0|-520|
-520|701|701|2003-04-04 12:23:34.0|-520|
-519|348|348|2014-02-11 11:23:45.0|-519|
-517|143|143|2012-12-12 12:23:00.0|-517|
-516|915|915|2010-02-21 18:35:23.0|-516|
-514|913|913|2013-03-21 09:17:28.0|-514|
-514|977|977|2011-06-21 09:12:28.0|-514|
-511|841|841|2010-02-21 18:35:23.0|-511|
-510|137|137|2015-12-01 15:23:34.0|-510|
-507|463|463|2017-01-24 20:00:00.0|-507|
-505|292|292|2013-04-04 06:34:12.0|-505|
-504|820|820|2014-02-11 11:23:45.0|-504|
-498|959|959|2013-02-04 12:27:32.0|-498|
-496|596|596|2003-04-04 12:23:34.0|-496|
-494|599|599|2013-09-01 14:47:28.0|-494|
-494|801|801|2013-03-21 09:17:28.0|-494|
-491|201|201|2010-02-21 18:35:23.0|-491|
-488|480|480|2015-12-01 15:23:34.0|-488|
-487|169|169|2013-04-04 06:34:12.0|-487|
-484|241|241|2010-02-21 18:35:23.0|-484|
-480|406|406|2015-11-22 08:02:45.0|-480|
-479|280|280|2014-05-25 20:12:12.0|-479|
-478|669|669|2015-12-01 15:23:34.0|-478|
-476|147|147|2013-09-01 14:47:28.0|-476|
-475|512|512|2003-04-04 12:23:34.0|-475|
-473|179|179|2017-03-21 07:47:28.0|-473|
-468|780|780|2014-05-25 20:12:12.0|-468|
-465|313|313|2013-04-04 06:34:12.0|-465|
-461|86|86|2003-04-04 12:23:34.0|-461|
-455|315|315|2017-01-24 20:00:00.0|-455|
-453|100|100|2014-05-25 20:12:12.0|-453|
-449|603|603|2013-04-04 06:34:12.0|-449|
-446|305|305|2010-02-21 18:35:23.0|-446|
-445|795|795|2013-02-04 12:27:32.0|-445|
-441|790|790|2015-11-22 08:02:45.0|-441|
-440|306|306|2014-05-25 20:12:12.0|-440|
-437|583|583|2017-03-21 07:47:28.0|-437|
-428|326|326|2017-01-24 20:00:00.0|-428|
-424|274|274|2015-11-22 08:02:45.0|-424|
-423|964|964|2017-03-21 07:47:28.0|-423|
-421|218|218|2015-12-01 15:23:34.0|-421|
-415|206|206|2014-02-11 11:23:45.0|-415|
-414|31|31|2010-02-21 18:35:23.0|-414|
-413|727|727|2013-02-04 12:27:32.0|-413|
-412|142|142|2011-12-22 12:12:12.0|-412|
-412|816|816|2014-02-11 11:23:45.0|-412|
-411|623|623|2013-02-04 12:27:32.0|-411|
-410|44|44|2013-02-04 12:27:32.0|-410|
-409|213|213|2012-12-12 12:23:00.0|-409|
-408|255|255|2003-04-04 12:23:34.0|-408|
-407|543|543|2013-02-04 12:27:32.0|-407|
-405|844|844|2010-02-21 18:35:23.0|-405|
-402|389|389|2010-02-21 18:35:23.0|-402|
-402|818|818|2012-12-12 12:23:00.0|-402|
-400|252|252|2010-02-21 18:35:23.0|-400|
-399|739|739|2014-02-11 11:23:45.0|-399|
-398|367|367|2015-11-22 08:02:45.0|-398|
-389|99|99|2013-02-04 12:27:32.0|-389|
-387|901|901|2013-04-04 06:34:12.0|-387|
-384|917|917|2013-03-21 09:17:28.0|-384|
-383|698|698|2012-12-12 12:23:00.0|-383|
-378|527|527|2014-02-11 11:23:45.0|-378|
-376|400|400|2011-12-22 12:12:12.0|-376|
-374|428|428|2017-01-24 20:00:00.0|-374|
-369|322|322|2017-03-21 07:47:28.0|-369|
-369|987|987|2010-02-21 18:35:23.0|-369|
-368|242|242|2003-04-04 12:23:34.0|-368|
-368|506|506|2014-05-25 20:12:12.0|-368|
-363|377|377|2011-12-22 12:12:12.0|-363|
-363|601|601|2011-06-21 09:12:28.0|-363|
-358|38|38|2015-12-01 15:23:34.0|-358|
-357|487|487|2014-05-25 20:12:12.0|-357|
-357|879|879|2013-09-01 14:47:28.0|-357|
-355|392|392|2012-12-12 12:23:00.0|-355|
-355|683|683|2017-01-24 20:00:00.0|-355|
-353|320|320|2015-12-01 15:23:34.0|-353|
-342|899|899|2003-04-04 12:23:34.0|-342|
-342|970|970|2014-02-11 11:23:45.0|-342|
-340|815|815|2017-01-24 20:00:00.0|-340|
-339|225|225|2015-12-01 15:23:34.0|-339|
-337|720|720|2012-12-12 12:23:00.0|-337|
-336|356|356|2014-05-25 20:12:12.0|-336|
-332|340|340|2017-01-24 20:00:00.0|-332|
-332|477|477|2017-03-21 07:47:28.0|-332|
-325|231|231|2017-03-21 07:47:28.0|-325|
-312|648|648|2014-05-25 20:12:12.0|-312|
-303|177|177|2003-04-04 12:23:34.0|-303|
-301|846|846|2011-06-21 09:12:28.0|-301|
-300|471|471|2014-05-25 20:12:12.0|-300|
-299|381|381|2015-11-22 08:02:45.0|-299|
-299|435|435|2017-01-24 20:00:00.0|-299|
-295|689|689|2011-06-21 09:12:28.0|-295|
-294|641|641|2012-12-12 12:23:00.0|-294|
-292|268|268|2014-02-11 11:23:45.0|-292|
-292|914|914|2015-11-22 08:02:45.0|-292|
-291|768|768|2017-01-24 20:00:00.0|-291|
-291|834|834|2003-04-04 12:23:34.0|-291|
-290|20|20|2012-12-12 12:23:00.0|-290|
-279|537|537|2012-12-12 12:23:00.0|-279|
-278|825|825|2012-12-12 12:23:00.0|-278|
-277|482|482|2014-02-11 11:23:45.0|-277|
-274|132|132|2014-02-11 11:23:45.0|-274|
-270|343|343|2015-12-01 15:23:34.0|-270|
-267|792|792|2013-02-04 12:27:32.0|-267|
-267|957|957|2010-02-21 18:35:23.0|-267|
-265|853|853|2003-04-04 12:23:34.0|-265|
-263|421|421|2011-12-22 12:12:12.0|-263|
-257|345|345|2012-12-12 12:23:00.0|-257|
-256|492|492|2012-12-12 12:23:00.0|-256|
-255|104|104|2017-03-21 07:47:28.0|-255|
-253|447|447|2017-01-24 20:00:00.0|-253|
-253|758|758|2017-03-21 07:47:28.0|-253|
-252|405|405|2013-03-21 09:17:28.0|-252|
-252|513|513|2017-01-24 20:00:00.0|-252|
-252|881|881|2012-12-12 12:23:00.0|-252|
-251|967|967|2014-02-11 11:23:45.0|-251|
-250|971|971|2017-01-24 20:00:00.0|-250|
-249|323|323|2017-01-24 20:00:00.0|-249|
-248|691|691|2010-02-21 18:35:23.0|-248|
-248|742|742|2014-02-11 11:23:45.0|-248|
-241|120|120|2017-01-24 20:00:00.0|-241|
-241|522|522|2011-12-22 12:12:12.0|-241|
-241|549|549|2011-12-22 12:12:12.0|-241|
-239|626|626|2017-01-24 20:00:00.0|-239|
-238|141|141|2010-02-21 18:35:23.0|-238|
-235|519|519|2015-12-01 15:23:34.0|-235|
-233|180|180|2017-01-24 20:00:00.0|-233|
-227|733|733|2014-02-11 11:23:45.0|-227|
-227|838|838|2013-09-01 14:47:28.0|-227|
-225|465|465|2013-09-01 14:47:28.0|-225|
-224|43|43|2003-04-04 12:23:34.0|-224|
-220|886|886|2011-06-21 09:12:28.0|-220|
-217|922|922|2011-12-22 12:12:12.0|-217|
-214|1|1|2003-04-04 12:23:34.0|-214|
-214|78|78|2015-12-01 15:23:34.0|-214|
-211|318|318|2014-02-11 11:23:45.0|-211|
-209|247|247|2013-03-21 09:17:28.0|-209|
-207|722|722|2011-06-21 09:12:28.0|-207|
-205|644|644|2012-12-12 12:23:00.0|-205|
-203|860|860|2017-03-21 07:47:28.0|-203|
-202|279|279|2013-02-04 12:27:32.0|-202|
-201|498|498|2012-12-12 12:23:00.0|-201|
-196|50|50|2013-03-21 09:17:28.0|-196|
-193|952|952|2013-03-21 09:17:28.0|-193|
-191|495|495|2011-12-22 12:12:12.0|-191|
-186|182|182|2013-02-04 12:27:32.0|-186|
-185|129|129|2010-02-21 18:35:23.0|-185|
-184|29|29|2015-12-01 15:23:34.0|-184|
-184|112|112|2015-12-01 15:23:34.0|-184|
-183|215|215|2014-05-25 20:12:12.0|-183|
-181|708|708|2017-03-21 07:47:28.0|-181|
-176|128|128|2013-02-04 12:27:32.0|-176|
-174|440|440|2011-06-21 09:12:28.0|-174|
-172|190|190|2013-03-21 09:17:28.0|-172|
-170|5|5|2014-05-25 20:12:12.0|-170|
-165|308|308|2011-12-22 12:12:12.0|-165|
-165|427|427|2014-02-11 11:23:45.0|-165|
-164|199|199|2017-01-24 20:00:00.0|-164|
-164|216|216|2011-12-22 12:12:12.0|-164|
-163|949|949|2017-01-24 20:00:00.0|-163|
-161|452|452|2010-02-21 18:35:23.0|-161|
-154|921|921|2010-02-21 18:35:23.0|-154|
-146|126|126|2015-11-22 08:02:45.0|-146|
-137|455|455|2014-02-11 11:23:45.0|-137|
-137|680|680|2017-03-21 07:47:28.0|-137|
-134|376|376|2012-12-12 12:23:00.0|-134|
-133|385|385|2011-12-22 12:12:12.0|-133|
-131|204|204|2011-06-21 09:12:28.0|-131|
-131|787|787|2012-12-12 12:23:00.0|-131|
-126|333|333|2011-12-22 12:12:12.0|-126|
-124|581|581|2017-01-24 20:00:00.0|-124|
-122|919|919|2012-12-12 12:23:00.0|-122|
-121|409|409|2017-03-21 07:47:28.0|-121|
-120|580|580|2013-02-04 12:27:32.0|-120|
-118|597|597|2014-02-11 11:23:45.0|-118|
-110|72|72|2010-02-21 18:35:23.0|-110|
-109|752|752|2011-12-22 12:12:12.0|-109|
-107|92|92|2013-09-01 14:47:28.0|-107|
-103|217|217|2011-06-21 09:12:28.0|-103|
-99|135|135|2013-09-01 14:47:28.0|-99|
-98|101|101|2012-12-12 12:23:00.0|-98|
-97|938|938|2012-12-12 12:23:00.0|-97|
-94|266|266|2014-02-11 11:23:45.0|-94|
-93|552|552|2015-12-01 15:23:34.0|-93|
-93|605|605|2013-02-04 12:27:32.0|-93|
-91|835|835|2013-02-04 12:27:32.0|-91|
-91|940|940|2011-12-22 12:12:12.0|-91|
-90|118|118|2012-12-12 12:23:00.0|-90|
-90|729|729|2015-12-01 15:23:34.0|-90|
-89|726|726|2003-04-04 12:23:34.0|-89|
-88|423|423|2017-03-21 07:47:28.0|-88|
-87|418|418|2017-03-21 07:47:28.0|-87|
-86|999|999|2014-05-25 20:12:12.0|-86|
-84|115|115|2011-12-22 12:12:12.0|-84|
-84|700|700|2012-12-12 12:23:00.0|-84|
-81|837|837|2017-01-24 20:00:00.0|-81|
-79|185|185|2017-01-24 20:00:00.0|-79|
-76|331|331|2014-05-25 20:12:12.0|-76|
-75|148|148|2003-04-04 12:23:34.0|-75|
-67|106|106|2017-03-21 07:47:28.0|-67|
-67|704|704|2003-04-04 12:23:34.0|-67|
-65|265|265|2012-12-12 12:23:00.0|-65|
-65|321|321|2017-01-24 20:00:00.0|-65|
-63|354|354|2017-01-24 20:00:00.0|-63|
-62|941|941|2017-01-24 20:00:00.0|-62|
-61|163|163|2011-12-22 12:12:12.0|-61|
-59|125|125|2013-09-01 14:47:28.0|-59|
-58|6|6|2013-04-04 06:34:12.0|-58|
-58|579|579|2010-02-21 18:35:23.0|-58|
-57|235|235|2011-06-21 09:12:28.0|-57|
-57|271|271|2011-06-21 09:12:28.0|-57|
-56|462|462|2012-12-12 12:23:00.0|-56|
-55|478|478|2017-01-24 20:00:00.0|-55|
-53|24|24|2003-04-04 12:23:34.0|-53|
-53|662|662|2010-02-21 18:35:23.0|-53|
-51|374|374|2017-01-24 20:00:00.0|-51|
-50|40|40|2017-01-24 20:00:00.0|-50|
-49|212|212|2017-01-24 20:00:00.0|-49|
-46|643|643|2013-04-04 06:34:12.0|-46|
-45|233|233|2017-01-24 20:00:00.0|-45|
-45|732|732|2015-11-22 08:02:45.0|-45|
-43|985|985|2013-09-01 14:47:28.0|-43|
-41|105|105|2011-06-21 09:12:28.0|-41|
-40|7|7|2014-05-25 20:12:12.0|-40|
-40|929|929|2017-01-24 20:00:00.0|-40|
-38|328|328|2017-01-24 20:00:00.0|-38|
-38|705|705|2011-06-21 09:12:28.0|-38|
-34|681|681|2014-02-11 11:23:45.0|-34|
-32|511|511|2013-02-04 12:27:32.0|-32|
-31|862|862|2013-02-04 12:27:32.0|-31|
-30|986|986|2015-11-22 08:02:45.0|-30|
-24|900|900|2010-02-21 18:35:23.0|-24|
-22|859|859|2013-02-04 12:27:32.0|-22|
-18|349|349|2013-03-21 09:17:28.0|-18|
-9|889|889|2015-11-22 08:02:45.0|-9|
-4|370|370|2013-09-01 14:47:28.0|-4|
-3|34|34|2017-01-24 20:00:00.0|-3|
-3|594|594|2013-04-04 06:34:12.0|-3|
-3|784|784|2013-02-04 12:27:32.0|-3|
0|667|667|2011-06-21 09:12:28.0|0|
0|735|735|2003-04-04 12:23:34.0|0|
1|287|287|2017-03-21 07:47:28.0|1|
2|640|640|2013-03-21 09:17:28.0|2|
3|264|264|2017-03-21 07:47:28.0|3|
4|875|875|2013-02-04 12:27:32.0|4|
7|2|2|2013-04-04 06:34:12.0|7|
8|602|602|2015-11-22 08:02:45.0|8|
30|654|654|2012-12-12 12:23:00.0|30|
32|532|532|2013-03-21 09:17:28.0|32|
37|897|897|2014-02-11 11:23:45.0|37|
47|638|638|2013-02-04 12:27:32.0|47|
67|426|426|2003-04-04 12:23:34.0|67|
91|119|119|2014-02-11 11:23:45.0|91|
103|301|301|2003-04-04 12:23:34.0|103|
108|83|83|2013-03-21 09:17:28.0|108|
112|660|660|2012-12-12 12:23:00.0|112|
120|845|845|2013-09-01 14:47:28.0|120|
131|619|619|2013-09-01 14:47:28.0|131|
161|770|770|2011-06-21 09:12:28.0|161|
162|203|203|2017-01-24 20:00:00.0|162|
165|574|574|2017-03-21 07:47:28.0|165|
185|208|208|2010-02-21 18:35:23.0|185|
193|765|765|2003-04-04 12:23:34.0|193|
199|175|175|2003-04-04 12:23:34.0|199|
201|91|91|2017-01-24 20:00:00.0|201|
207|479|479|2013-09-01 14:47:28.0|207|
212|145|145|2011-12-22 12:12:12.0|212|
213|961|961|2012-12-12 12:23:00.0|213|
231|37|37|2010-02-21 18:35:23.0|231|
233|55|55|2017-03-21 07:47:28.0|233|
233|351|351|2012-12-12 12:23:00.0|233|
242|250|250|2015-12-01 15:23:34.0|242|
242|578|578|2017-01-24 20:00:00.0|242|
272|49|49|2012-12-12 12:23:00.0|272|
281|127|127|2013-04-04 06:34:12.0|281|
284|559|559|2013-09-01 14:47:28.0|284|
289|256|256|2015-11-22 08:02:45.0|289|
298|852|852|2010-02-21 18:35:23.0|298|
314|122|122|2010-02-21 18:35:23.0|314|
325|618|618|2015-11-22 08:02:45.0|325|
326|577|577|2011-06-21 09:12:28.0|326|
332|972|972|2013-04-04 06:34:12.0|332|
338|214|214|2011-06-21 09:12:28.0|338|
340|517|517|2013-04-04 06:34:12.0|340|
358|445|445|2013-09-01 14:47:28.0|358|
375|52|52|2013-09-01 14:47:28.0|375|
397|35|35|2013-09-01 14:47:28.0|397|
406|946|946|2015-12-01 15:23:34.0|406|
409|616|616|2015-11-22 08:02:45.0|409|
418|990|990|2017-01-24 20:00:00.0|418|
419|731|731|2017-03-21 07:47:28.0|419|
419|854|854|2014-02-11 11:23:45.0|419|
423|387|387|2013-09-01 14:47:28.0|423|
424|130|130|2013-02-04 12:27:32.0|424|
443|776|776|2013-09-01 14:47:28.0|443|
457|684|684|2015-12-01 15:23:34.0|457|
469|650|650|2012-12-12 12:23:00.0|469|
495|609|609|2017-01-24 20:00:00.0|495|
497|401|401|2011-12-22 12:12:12.0|497|
503|499|499|2013-02-04 12:27:32.0|503|
509|675|675|2011-06-21 09:12:28.0|509|
517|270|270|2013-04-04 06:34:12.0|517|
518|310|310|2014-02-11 11:23:45.0|518|
523|544|544|2015-11-22 08:02:45.0|523|
531|189|189|2011-06-21 09:12:28.0|531|
537|436|436|2003-04-04 12:23:34.0|537|
541|624|624|2013-04-04 06:34:12.0|541|
568|806|806|2013-09-01 14:47:28.0|568|
582|779|779|2014-05-25 20:12:12.0|582|
587|221|221|2013-03-21 09:17:28.0|587|
593|724|724|2011-06-21 09:12:28.0|593|
602|514|514|2015-11-22 08:02:45.0|602|
613|303|303|2015-11-22 08:02:45.0|613|
614|864|864|2011-06-21 09:12:28.0|614|
619|529|529|2013-03-21 09:17:28.0|619|
625|302|302|2017-01-24 20:00:00.0|625|
632|656|656|2013-03-21 09:17:28.0|632|
634|832|832|2014-05-25 20:12:12.0|634|
637|81|81|2011-12-22 12:12:12.0|637|
642|490|490|2015-12-01 15:23:34.0|642|
648|606|606|2017-01-24 20:00:00.0|648|
690|893|893|2017-03-21 07:47:28.0|690|
694|833|833|2010-02-21 18:35:23.0|694|
713|191|191|2003-04-04 12:23:34.0|713|
717|634|634|2015-12-01 15:23:34.0|717|
724|195|195|2003-04-04 12:23:34.0|724|
735|839|839|2003-04-04 12:23:34.0|735|
739|590|590|2014-02-11 11:23:45.0|739|
744|965|965|2015-12-01 15:23:34.0|744|
747|273|273|2012-12-12 12:23:00.0|747|
748|516|516|2017-01-24 20:00:00.0|748|
748|737|737|2013-04-04 06:34:12.0|748|
758|530|530|2011-06-21 09:12:28.0|758|
770|396|396|2012-12-12 12:23:00.0|770|
772|16|16|2013-02-04 12:27:32.0|772|
774|850|850|2015-11-22 08:02:45.0|774|
778|858|858|2003-04-04 12:23:34.0|778|
799|95|95|2014-02-11 11:23:45.0|799|
802|267|267|2011-12-22 12:12:12.0|802|
803|232|232|2012-12-12 12:23:00.0|803|
809|781|781|2013-04-04 06:34:12.0|809|
815|539|539|2010-02-21 18:35:23.0|815|
816|76|76|2013-09-01 14:47:28.0|816|
824|719|719|2012-12-12 12:23:00.0|824|
846|525|525|2011-06-21 09:12:28.0|846|
848|228|228|2014-05-25 20:12:12.0|848|
855|966|966|2017-03-21 07:47:28.0|855|
878|234|234|2003-04-04 12:23:34.0|878|
878|388|388|2017-01-24 20:00:00.0|878|
883|39|39|2014-05-25 20:12:12.0|883|
889|931|931|2011-06-21 09:12:28.0|889|
894|754|754|2014-02-11 11:23:45.0|894|
897|715|715|2013-03-21 09:17:28.0|897|
900|657|657|2017-01-24 20:00:00.0|900|
900|736|736|2013-02-04 12:27:32.0|900|
917|587|587|2017-03-21 07:47:28.0|917|
922|248|248|2017-01-24 20:00:00.0|922|
948|550|550|2013-02-04 12:27:32.0|948|
961|791|791|2013-02-04 12:27:32.0|961|
985|686|686|2017-01-24 20:00:00.0|985|
995|338|338|2015-11-22 08:02:45.0|995|
#current execute result is =>
 Column 'int_test' is ambiguous

##select_2017-03-10.sql
select 3.4%0.4 from test limit 1
#the baseline is =>
3.4%0.4|
0.2|
#current execute result is =>
3.4 % 0.4|
0.00000|

##select_2017-03-10.sql
select 3.4%10 from test limit 1
#the baseline is =>
3.4%10|
3.4|
#current execute result is =>
3.4 % 10|
3.00000|

##select_2017-03-10.sql
select 3.4%3 from test limit 1
#the baseline is =>
3.4%3|
0.4|
#current execute result is =>
3.4 % 3|
0.00000|

##where_2017-03-10.sql
select * from teacher_text a natural join teacher b where row(0,'B') in (select a.id,a.coid from community a where coid ='B') is unknown order by 1
#the baseline is =>
id|hobby|honor|self_introduction|join_date|tname|grade|
#current execute result is =>
 cannot translate operator COALESCE, class is org.apache.calcite.sql.fun.SqlCoalesceFunction

##subquery_2017-01-20.sql
select t1.sid,t2.id from (select sid from grade where sid >10 and id >150 ) t1 join (select id from test where int_test >10 and string_test like '%a%' and boolean_test in(0,1) ) t2 on t1.sid=t2.id order by t1.sid,t2.id
#the baseline is =>
sid|id|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
35|35|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
49|49|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
52|52|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
55|55|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
76|76|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
81|81|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
83|83|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
91|91|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
95|95|
#current execute result is =>
 Values passed to IN operator must have compatible types

##tidb_select_2018-06-30_2.sql
SELECT DISTINCT col2 + CAST( NULL AS DECIMAL ) AS col1 FROM tab1 cor0 order by 1
#the baseline is =>
col1|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col1) NOT NULL
converted type:
RecordType(INTEGER col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalAggregate(group=[{0}])
    LogicalProject(col1=[+($2, null)])
      LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_2.sql
SELECT ALL CAST( NULL AS DECIMAL ) AS col0 FROM tab0 AS cor0 order by 1
#the baseline is =>
col0|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col0) NOT NULL
converted type:
RecordType(NULL col0) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col0=[null])
    LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_1.sql
SELECT DISTINCT + col0 + col1 / CAST( NULL AS DECIMAL ) + - col1 FROM tab1 AS cor0 order by 1
#the baseline is =>
+ col0 + col1 / CAST( NULL AS DECIMAL ) + - col1|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 9) + col0 + col1 / CAST(NULL AS DECIMAL) + - col1) NOT NULL
converted type:
RecordType(INTEGER + col0 + col1 / CAST(NULL AS DECIMAL) + - col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalAggregate(group=[{0}])
    LogicalProject(+ col0 + col1 / CAST(NULL AS DECIMAL) + - col1=[+(+($0, /($1, null)), -($1))])
      LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_1.sql
SELECT ALL + + col0 - - CAST( NULL AS DECIMAL ) FROM tab1 AS cor0 order by 1
#the baseline is =>
+ + col0 - - CAST( NULL AS DECIMAL )|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) + (+ col0) - - CAST(NULL AS DECIMAL)) NOT NULL
converted type:
RecordType(INTEGER + (+ col0) - - CAST(NULL AS DECIMAL)) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(+ (+ col0) - - CAST(NULL AS DECIMAL)=[-($0, -(null))])
    LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_9.sql
SELECT ALL - CAST( NULL AS DECIMAL ) AS col2 FROM tab1, tab2 AS cor0 order by 1
#the baseline is =>
col2|
null|
null|
null|
null|
null|
null|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col2) NOT NULL
converted type:
RecordType(NULL col2) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col2=[-(null)])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[DBTEST, TAB1]])
      LogicalTableScan(table=[[DBTEST, TAB2]])


##tidb_select_2018-06-30_4.sql
SELECT ALL - - col0 * + 91 + + cor0.col0 * + CAST( NULL AS DECIMAL ) FROM tab0 AS cor0 order by 1
#the baseline is =>
- - col0 * + 91 + + cor0.col0 * + CAST( NULL AS DECIMAL )|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) - (- col0) * 91 + + cor0.col0 * + CAST(NULL AS DECIMAL)) NOT NULL
converted type:
RecordType(INTEGER - (- col0) * 91 + + cor0.col0 * + CAST(NULL AS DECIMAL)) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(- (- col0) * 91 + + cor0.col0 * + CAST(NULL AS DECIMAL)=[+(*(-(-($0)), 91), *($0, null))])
    LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_1.sql
SELECT ALL + - CAST( NULL AS DECIMAL ) FROM tab1 AS cor0 order by 1
#the baseline is =>
+ - CAST( NULL AS DECIMAL )|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) + (- CAST(NULL AS DECIMAL))) NOT NULL
converted type:
RecordType(NULL + (- CAST(NULL AS DECIMAL))) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(+ (- CAST(NULL AS DECIMAL))=[-(null)])
    LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_4.sql
SELECT + CAST( NULL AS DECIMAL ) / + col2 col1 FROM tab0 AS cor0 order by 1
#the baseline is =>
col1|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col1) NOT NULL
converted type:
RecordType(INTEGER col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col1=[/(null, $2)])
    LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_9.sql
SELECT CAST( NULL AS DECIMAL ) AS col1 FROM tab0, tab0 AS cor0, tab1 AS cor1 order by 1
#the baseline is =>
col1|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col1) NOT NULL
converted type:
RecordType(NULL col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col1=[null])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[DBTEST, TAB0]])
        LogicalTableScan(table=[[DBTEST, TAB0]])
      LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_7.sql
SELECT + col2 * - CAST( NULL AS DECIMAL ) + + ( col2 ) + cor0.col2 AS col0 FROM tab1 AS cor0 order by 1
#the baseline is =>
col0|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col0) NOT NULL
converted type:
RecordType(INTEGER col0) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col0=[+(+(*($2, -(null)), $2), $2)])
    LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_3.sql
SELECT ALL col0 * + CAST( NULL AS DECIMAL ) FROM tab2 AS cor0 order by 1
#the baseline is =>
col0 * + CAST( NULL AS DECIMAL )|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col0 * + CAST(NULL AS DECIMAL)) NOT NULL
converted type:
RecordType(INTEGER col0 * + CAST(NULL AS DECIMAL)) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col0 * + CAST(NULL AS DECIMAL)=[*($0, null)])
    LogicalTableScan(table=[[DBTEST, TAB2]])


##tidb_select_2018-06-30_4.sql
SELECT DISTINCT cor0.col0 + CAST( NULL AS DECIMAL ) * col1 FROM tab1 AS cor0 order by 1
#the baseline is =>
cor0.col0 + CAST( NULL AS DECIMAL ) * col1|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) cor0.col0 + CAST(NULL AS DECIMAL) * col1) NOT NULL
converted type:
RecordType(INTEGER cor0.col0 + CAST(NULL AS DECIMAL) * col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalAggregate(group=[{0}])
    LogicalProject(cor0.col0 + CAST(NULL AS DECIMAL) * col1=[+($0, *(null, $1))])
      LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_4.sql
SELECT DISTINCT + CAST( NULL AS DECIMAL ) AS col1 FROM tab1 AS cor0 order by 1
#the baseline is =>
col1|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col1) NOT NULL
converted type:
RecordType(NULL col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalAggregate(group=[{0}])
    LogicalProject(col1=[null])
      LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_3.sql
SELECT ALL + tab1.col2 * + col0 + + CAST( NULL AS DECIMAL ) AS col0 FROM tab1 order by 1
#the baseline is =>
col0|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col0) NOT NULL
converted type:
RecordType(INTEGER col0) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col0=[+(*($2, $0), null)])
    LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_3.sql
SELECT ALL - CAST( NULL AS DECIMAL ) AS col1 FROM tab2 AS cor0 order by 1
#the baseline is =>
col1|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col1) NOT NULL
converted type:
RecordType(NULL col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col1=[-(null)])
    LogicalTableScan(table=[[DBTEST, TAB2]])


##tidb_select_2018-06-30_7.sql
SELECT - col1 * CAST( NULL AS DECIMAL ) col1 FROM tab0 AS cor0 order by 1
#the baseline is =>
col1|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col1) NOT NULL
converted type:
RecordType(INTEGER col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col1=[*(-($1), null)])
    LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_7.sql
SELECT ALL + + col0 + + CAST( NULL AS DECIMAL ) - col0 col0 FROM tab0 AS cor0 order by 1
#the baseline is =>
col0|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col0) NOT NULL
converted type:
RecordType(INTEGER col0) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col0=[-(+($0, null), $0)])
    LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_3.sql
SELECT DISTINCT + CAST( NULL AS DECIMAL ) FROM tab2 order by 1
#the baseline is =>
+ CAST( NULL AS DECIMAL )|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) + CAST(NULL AS DECIMAL)) NOT NULL
converted type:
RecordType(NULL + CAST(NULL AS DECIMAL)) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalAggregate(group=[{0}])
    LogicalProject(+ CAST(NULL AS DECIMAL)=[null])
      LogicalTableScan(table=[[DBTEST, TAB2]])


##tidb_select_2018-06-30_7.sql
SELECT + CAST( NULL AS DECIMAL ) * + col0 AS col2 FROM tab0 AS cor0 order by 1
#the baseline is =>
col2|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col2) NOT NULL
converted type:
RecordType(INTEGER col2) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col2=[*(null, $0)])
    LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_7.sql
SELECT ALL + col2 * + CAST( NULL AS DECIMAL ) * - 42 + - col0 FROM tab2 AS cor0 order by 1
#the baseline is =>
+ col2 * + CAST( NULL AS DECIMAL ) * - 42 + - col0|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) + col2 * + CAST(NULL AS DECIMAL) * -42 + - col0) NOT NULL
converted type:
RecordType(INTEGER + col2 * + CAST(NULL AS DECIMAL) * -42 + - col0) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(+ col2 * + CAST(NULL AS DECIMAL) * -42 + - col0=[+(*(*($2, null), -42), -($0))])
    LogicalTableScan(table=[[DBTEST, TAB2]])


##tidb_select_2018-06-30_4.sql
SELECT ALL + - col0 * CAST( NULL AS DECIMAL ) + - cor0.col0 AS col2 FROM tab2 AS cor0 order by 1
#the baseline is =>
col2|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col2) NOT NULL
converted type:
RecordType(INTEGER col2) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col2=[+(*(-($0), null), -($0))])
    LogicalTableScan(table=[[DBTEST, TAB2]])


##tidb_select_2018-06-30_4.sql
SELECT ALL + col2 * ( + col2 ) * + cor0.col1 + + CAST( NULL AS DECIMAL ) col0 FROM tab0 AS cor0 order by 1
#the baseline is =>
col0|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col0) NOT NULL
converted type:
RecordType(INTEGER col0) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col0=[+(*(*($2, $2), $1), null)])
    LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_3.sql
SELECT DISTINCT - CAST( NULL AS DECIMAL ) / tab2.col0 FROM tab2 order by 1
#the baseline is =>
- CAST( NULL AS DECIMAL ) / tab2.col0|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) - CAST(NULL AS DECIMAL) / tab2.col0) NOT NULL
converted type:
RecordType(INTEGER - CAST(NULL AS DECIMAL) / tab2.col0) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalAggregate(group=[{0}])
    LogicalProject(- CAST(NULL AS DECIMAL) / tab2.col0=[/(-(null), $0)])
      LogicalTableScan(table=[[DBTEST, TAB2]])


##tidb_select_2018-06-30_9.sql
SELECT DISTINCT CAST( NULL AS DECIMAL ) / col0 FROM tab0 order by 1
#the baseline is =>
CAST( NULL AS DECIMAL ) / col0|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) CAST(NULL AS DECIMAL) / col0) NOT NULL
converted type:
RecordType(INTEGER CAST(NULL AS DECIMAL) / col0) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalAggregate(group=[{0}])
    LogicalProject(CAST(NULL AS DECIMAL) / col0=[/(null, $0)])
      LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_9.sql
SELECT DISTINCT + CAST( NULL AS DECIMAL ) FROM tab1 order by 1
#the baseline is =>
+ CAST( NULL AS DECIMAL )|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) + CAST(NULL AS DECIMAL)) NOT NULL
converted type:
RecordType(NULL + CAST(NULL AS DECIMAL)) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalAggregate(group=[{0}])
    LogicalProject(+ CAST(NULL AS DECIMAL)=[null])
      LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_5.sql
SELECT + ( + col0 + CAST( NULL AS DECIMAL ) ) col2 FROM tab0 order by 1
#the baseline is =>
col2|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col2) NOT NULL
converted type:
RecordType(INTEGER col2) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col2=[+($0, null)])
    LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_6.sql
SELECT - + CAST( NULL AS DECIMAL ) * + ( + col0 ) FROM tab1 AS cor0 order by 1
#the baseline is =>
- + CAST( NULL AS DECIMAL ) * + ( + col0 )|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) - (+ CAST(NULL AS DECIMAL)) * + (+ col0)) NOT NULL
converted type:
RecordType(INTEGER - (+ CAST(NULL AS DECIMAL)) * + (+ col0)) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(- (+ CAST(NULL AS DECIMAL)) * + (+ col0)=[*(-(null), $0)])
    LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_6.sql
SELECT ALL + ( - col0 ) * - CAST( NULL AS DECIMAL ) / 81 AS col2 FROM tab1 AS cor0 order by 1
#the baseline is =>
col2|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col2) NOT NULL
converted type:
RecordType(INTEGER col2) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col2=[/(*(-($0), -(null)), 81)])
    LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_6.sql
SELECT ALL CAST( NULL AS DECIMAL ) AS col1 FROM tab2, tab0 AS cor0 order by 1
#the baseline is =>
col1|
null|
null|
null|
null|
null|
null|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col1) NOT NULL
converted type:
RecordType(NULL col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(col1=[null])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[DBTEST, TAB2]])
      LogicalTableScan(table=[[DBTEST, TAB0]])


##tidb_select_2018-06-30_5.sql
SELECT CAST( NULL AS DECIMAL ) FROM tab1 order by 1
#the baseline is =>
CAST( NULL AS DECIMAL )|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) CAST(NULL AS DECIMAL)) NOT NULL
converted type:
RecordType(NULL CAST(NULL AS DECIMAL)) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(CAST(NULL AS DECIMAL)=[null])
    LogicalTableScan(table=[[DBTEST, TAB1]])


##tidb_select_2018-06-30_6.sql
SELECT - CAST( NULL AS DECIMAL ) FROM tab2 AS cor0 order by 1
#the baseline is =>
- CAST( NULL AS DECIMAL )|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) - CAST(NULL AS DECIMAL)) NOT NULL
converted type:
RecordType(NULL - CAST(NULL AS DECIMAL)) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(- CAST(NULL AS DECIMAL)=[-(null)])
    LogicalTableScan(table=[[DBTEST, TAB2]])


##tidb_select_2018-06-30_6.sql
SELECT DISTINCT - CAST( NULL AS DECIMAL ) - col0 AS col1 FROM tab2 AS cor0 order by 1
#the baseline is =>
col1|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) col1) NOT NULL
converted type:
RecordType(INTEGER col1) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalAggregate(group=[{0}])
    LogicalProject(col1=[-(-(null), $0)])
      LogicalTableScan(table=[[DBTEST, TAB2]])


##tidb_select_2018-06-30_6.sql
SELECT ALL - col0 * - CAST( NULL AS DECIMAL ) FROM tab2 AS cor0 order by 1
#the baseline is =>
- col0 * - CAST( NULL AS DECIMAL )|
null|
null|
null|
#current execute result is =>
 Conversion to relational algebra failed to preserve datatypes:
validated type:
RecordType(DECIMAL(19, 0) - col0 * - CAST(NULL AS DECIMAL)) NOT NULL
converted type:
RecordType(INTEGER - col0 * - CAST(NULL AS DECIMAL)) NOT NULL
rel:
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(- col0 * - CAST(NULL AS DECIMAL)=[*(-($0), -(null))])
    LogicalTableScan(table=[[DBTEST, TAB2]])


##select_1_2018-10-30.sql
SELECT tinyint_test AS `select_column_0`, (tinyint_test *  integer_test) * bigint_test +  21 AS `select_column_1` FROM `fact_one_index_all_tb` WHERE ((`boolean_test` < 4)) AND ((MONTH('12:00:00.123456') = 'serw')) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply '<' to arguments of type '<BOOLEAN> < <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> < <COMPARABLE_TYPE>'

##select_1_2018-10-30.sql
SELECT tinyint_test AS `select_column_0`, (bigint_test=30) =89 - (tinyint_test /  float_test) =boolean_test AS `select_column_1` FROM `broadcast_index_all_tb` WHERE ((((`bigint_test` BETWEEN 98 AND 96)) OR (! (((`bigint_test` <> 29)))))) AND ((15 <> `tinyint_test`)) AND ((34 >= 96)) AND ((`varchar_test` = 'cdefeed')) AND ((`boolean_test` NOT BETWEEN 1 AND 1)) AND ((`varchar_test` = 'afdaewer')) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> NOT BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_9_2018-10-30.sql
SELECT bigint_test AS `select_column_0` FROM `broadcast_tb` WHERE (`boolean_test` BETWEEN 1 AND 1) ORDER BY `pk`
#the baseline is =>
select_column_0|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
10|
12|
14|
16|
18|
20|
22|
24|
26|
28|
30|
32|
34|
36|
38|
40|
42|
44|
46|
48|
50|
52|
54|
56|
58|
60|
62|
64|
66|
68|
70|
72|
74|
76|
78|
80|
82|
84|
86|
88|
90|
92|
94|
96|
98|
0|
2|
4|
6|
8|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_1_2018-10-30.sql
SELECT date_test AS `select_column_0` FROM `fact_one_tb` WHERE ((`tinyint_test` NOT BETWEEN 95 AND 89)) AND ((`smallint_test` >= `boolean_test`)) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
2013-04-05|
2012-12-13|
2014-02-12|
2013-03-22|
2011-06-22|
2017-03-22|
2013-09-02|
2013-02-05|
2003-04-05|
2011-12-23|
2014-05-26|
2015-12-02|
2010-02-22|
2015-11-23|
#current execute result is =>
 Cannot apply '>=' to arguments of type '<SMALLINT> >= <BOOLEAN>'. Supported form(s): '<COMPARABLE_TYPE> >= <COMPARABLE_TYPE>'

##select_9_2018-10-30.sql
SELECT DISTINCTROW time_test AS `select_column_0` FROM `broadcast_tb` WHERE ((`varchar_test` = 'einoejk')) AND ((`smallint_test` BETWEEN 15 AND 28)) ORDER BY `pk`
#the baseline is =>
select_column_0|
09:12:28|
07:47:28|
12:23:34|
15:23:34|
11:23:45|
#current execute result is =>
 Expression 'FIRST_VALUE(`BROADCAST_TB`.`pk`)' is not in the select clause

##select_8_01_2018-10-30.sql
SELECT bigint_test AS `select_column_0` FROM `fact_one_tb` WHERE (`boolean_test` BETWEEN 0 AND 1) ORDER BY `pk`
#the baseline is =>
select_column_0|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
10|
11|
12|
13|
14|
15|
16|
17|
18|
19|
20|
21|
22|
23|
24|
25|
26|
27|
28|
29|
30|
31|
32|
33|
34|
35|
36|
37|
38|
39|
40|
41|
42|
43|
44|
45|
46|
47|
48|
49|
50|
51|
52|
53|
54|
55|
56|
57|
58|
59|
60|
61|
62|
63|
64|
65|
66|
67|
68|
69|
70|
71|
72|
73|
74|
75|
76|
77|
78|
79|
80|
81|
82|
83|
84|
85|
86|
87|
88|
89|
90|
91|
92|
93|
94|
95|
96|
97|
98|
99|
0|
1|
2|
3|
4|
5|
6|
7|
8|
9|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_4_2018-10-30.sql
SELECT date_test AS `select_column_0` FROM `fact_one_index_all_tb` WHERE ((15 < `boolean_test`)) AND ((`float_test` NOT BETWEEN 5.34 AND 4.51)) ORDER BY `pk`
#the baseline is =>
select_column_0|
#current execute result is =>
 Cannot apply '<' to arguments of type '<INTEGER> < <BOOLEAN>'. Supported form(s): '<COMPARABLE_TYPE> < <COMPARABLE_TYPE>'

##select_4_2018-10-30.sql
SELECT tinyint_test +  integer_test - double_test AS `select_column_0`, bigint_test AS `select_column_1` FROM `broadcast_tb` WHERE ((`varchar_test` = 'zhuoxue%yll')) AND ((`boolean_test` NOT IN (1, 2, 3))) AND ((`varchar_test` NOT BETWEEN 'adaabcwer' AND 'he343243')) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
-1358.14747|25|
-668.147|63|
-142.4874|1|
-124.45784499999999|39|
51.542199999999994|77|
52.8522|15|
7.852200000000003|53|
93.5121|91|
86.742|29|
-1816.23232|67|
-1382.14747|5|
-692.147|43|
-66.48740000000001|81|
-148.457845|19|
27.542199999999994|57|
128.8522|95|
111.85220000000001|33|
69.5121|71|
62.742000000000004|9|
-1840.23232|47|
-1306.14747|85|
-716.147|23|
-90.48740000000001|61|
-172.457845|99|
3.542199999999994|37|
104.85220000000001|75|
#current execute result is =>
 Values passed to IN operator must have compatible types

##select_4_2018-10-30.sql
SELECT tinyint_test AS `select_column_0` FROM `fact_one_index_all_tb` WHERE ((`date_test` < '2014-02-12')) AND ((18 >= `boolean_test`)) ORDER BY `pk`
#the baseline is =>
select_column_0|
15|
18|
19|
20|
21|
23|
24|
26|
27|
29|
32|
33|
34|
35|
37|
38|
40|
41|
43|
46|
47|
48|
49|
51|
52|
54|
55|
57|
60|
61|
62|
63|
65|
66|
68|
69|
71|
74|
75|
76|
77|
79|
80|
82|
83|
85|
88|
89|
90|
91|
93|
94|
96|
97|
99|
102|
103|
104|
105|
107|
108|
110|
111|
113|
116|
117|
118|
119|
121|
122|
124|
125|
127|
2|
3|
4|
5|
7|
8|
10|
11|
13|
16|
17|
18|
19|
21|
22|
24|
25|
27|
30|
31|
32|
33|
35|
36|
38|
39|
41|
44|
45|
46|
47|
49|
50|
52|
53|
55|
58|
59|
60|
61|
63|
64|
66|
67|
69|
72|
73|
74|
75|
77|
78|
80|
81|
83|
86|
87|
88|
89|
91|
92|
94|
95|
97|
100|
101|
102|
103|
105|
106|
108|
109|
111|
114|
115|
116|
117|
119|
120|
122|
123|
125|
0|
1|
2|
3|
5|
6|
8|
9|
11|
14|
15|
16|
17|
19|
20|
22|
23|
25|
28|
29|
30|
31|
33|
34|
36|
37|
39|
42|
43|
44|
45|
47|
48|
50|
51|
53|
56|
57|
58|
59|
61|
62|
64|
65|
67|
70|
71|
72|
73|
75|
76|
78|
79|
81|
84|
85|
86|
87|
89|
90|
92|
93|
95|
98|
99|
100|
101|
103|
104|
106|
107|
109|
112|
113|
114|
115|
117|
118|
120|
121|
123|
126|
127|
0|
1|
3|
4|
6|
7|
9|
12|
13|
14|
15|
17|
18|
20|
21|
23|
26|
27|
28|
29|
31|
32|
34|
35|
37|
40|
41|
42|
43|
45|
46|
48|
49|
51|
54|
55|
56|
57|
59|
60|
62|
63|
65|
68|
69|
70|
71|
73|
74|
76|
77|
79|
82|
83|
84|
85|
87|
88|
90|
91|
93|
96|
97|
98|
99|
101|
102|
104|
105|
107|
110|
111|
112|
113|
115|
116|
118|
119|
121|
124|
125|
126|
127|
1|
2|
4|
5|
7|
10|
11|
12|
13|
15|
16|
18|
19|
21|
24|
25|
26|
27|
29|
30|
32|
33|
35|
38|
39|
40|
41|
43|
44|
46|
47|
49|
52|
53|
54|
55|
57|
58|
60|
61|
63|
66|
67|
68|
69|
71|
72|
74|
75|
77|
80|
81|
82|
83|
85|
86|
88|
89|
91|
94|
95|
96|
97|
99|
100|
102|
103|
105|
108|
109|
110|
111|
113|
114|
116|
117|
119|
122|
123|
124|
125|
127|
0|
2|
3|
5|
8|
9|
10|
11|
13|
14|
16|
17|
19|
22|
23|
24|
25|
27|
28|
30|
31|
33|
36|
37|
38|
39|
41|
42|
44|
45|
47|
50|
51|
52|
53|
55|
56|
58|
59|
61|
64|
65|
66|
67|
69|
70|
72|
73|
75|
78|
79|
80|
81|
83|
84|
86|
87|
89|
92|
93|
94|
95|
97|
98|
100|
101|
103|
106|
107|
108|
109|
111|
112|
114|
115|
117|
120|
121|
122|
123|
125|
126|
0|
1|
3|
6|
7|
8|
9|
11|
12|
14|
15|
17|
20|
21|
22|
23|
25|
26|
28|
29|
31|
34|
35|
36|
37|
39|
40|
42|
43|
45|
48|
49|
50|
51|
53|
54|
56|
57|
59|
62|
63|
64|
65|
67|
68|
70|
71|
73|
76|
77|
78|
79|
81|
82|
84|
85|
87|
90|
91|
92|
93|
95|
96|
98|
99|
101|
104|
105|
106|
107|
109|
110|
112|
113|
115|
118|
119|
120|
121|
123|
124|
126|
127|
1|
4|
5|
6|
7|
9|
10|
12|
13|
15|
18|
19|
20|
21|
23|
24|
26|
27|
29|
32|
33|
34|
35|
37|
38|
40|
41|
43|
46|
47|
48|
49|
51|
52|
54|
55|
57|
60|
61|
62|
63|
65|
66|
68|
69|
71|
74|
75|
76|
77|
79|
80|
82|
83|
85|
88|
89|
90|
91|
93|
94|
96|
97|
99|
102|
103|
104|
105|
107|
108|
110|
111|
113|
116|
117|
#current execute result is =>
 Cannot apply '>=' to arguments of type '<INTEGER> >= <BOOLEAN>'. Supported form(s): '<COMPARABLE_TYPE> >= <COMPARABLE_TYPE>'

##select_9_02_2018-10-30.sql
SELECT DISTINCTROW tinyint_test AS `select_column_0`, bigint_test AS `select_column_1` FROM `fact_one_index_all_tb` WHERE ((`varchar_test` = 'sfdeiekd')) OR ((0 IS NOT NULL)) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
14|10|
15|11|
16|12|
17|13|
18|14|
19|15|
20|16|
21|17|
22|18|
23|19|
24|20|
25|21|
26|22|
27|23|
28|24|
29|25|
30|26|
31|27|
32|28|
33|29|
34|30|
35|31|
36|32|
37|33|
38|34|
39|35|
40|36|
41|37|
42|38|
43|39|
44|40|
45|41|
46|42|
47|43|
48|44|
49|45|
50|46|
51|47|
52|48|
53|49|
54|50|
55|51|
56|52|
57|53|
58|54|
59|55|
60|56|
61|57|
62|58|
63|59|
64|60|
65|61|
66|62|
67|63|
68|64|
69|65|
70|66|
71|67|
72|68|
73|69|
74|70|
75|71|
76|72|
77|73|
78|74|
79|75|
80|76|
81|77|
82|78|
83|79|
84|80|
85|81|
86|82|
87|83|
88|84|
89|85|
90|86|
91|87|
92|88|
93|89|
94|90|
95|91|
96|92|
97|93|
98|94|
99|95|
100|96|
101|97|
102|98|
103|99|
104|0|
105|1|
106|2|
107|3|
108|4|
109|5|
110|6|
111|7|
112|8|
113|9|
114|10|
115|11|
116|12|
117|13|
118|14|
119|15|
120|16|
121|17|
122|18|
123|19|
124|20|
125|21|
126|22|
127|23|
0|24|
1|25|
2|26|
3|27|
4|28|
5|29|
6|30|
7|31|
8|32|
9|33|
10|34|
11|35|
12|36|
13|37|
14|38|
15|39|
16|40|
17|41|
18|42|
19|43|
20|44|
21|45|
22|46|
23|47|
24|48|
25|49|
26|50|
27|51|
28|52|
29|53|
30|54|
31|55|
32|56|
33|57|
34|58|
35|59|
36|60|
37|61|
38|62|
39|63|
40|64|
41|65|
42|66|
43|67|
44|68|
45|69|
46|70|
47|71|
48|72|
49|73|
50|74|
51|75|
52|76|
53|77|
54|78|
55|79|
56|80|
57|81|
58|82|
59|83|
60|84|
61|85|
62|86|
63|87|
64|88|
65|89|
66|90|
67|91|
68|92|
69|93|
70|94|
71|95|
72|96|
73|97|
74|98|
75|99|
76|0|
77|1|
78|2|
79|3|
80|4|
81|5|
82|6|
83|7|
84|8|
85|9|
86|10|
87|11|
88|12|
89|13|
90|14|
91|15|
92|16|
93|17|
94|18|
95|19|
96|20|
97|21|
98|22|
99|23|
100|24|
101|25|
102|26|
103|27|
104|28|
105|29|
106|30|
107|31|
108|32|
109|33|
110|34|
111|35|
112|36|
113|37|
114|38|
115|39|
116|40|
117|41|
118|42|
119|43|
120|44|
121|45|
122|46|
123|47|
124|48|
125|49|
126|50|
127|51|
0|52|
1|53|
2|54|
3|55|
4|56|
5|57|
6|58|
7|59|
8|60|
9|61|
10|62|
11|63|
12|64|
13|65|
14|66|
15|67|
16|68|
17|69|
18|70|
19|71|
20|72|
21|73|
22|74|
23|75|
24|76|
25|77|
26|78|
27|79|
28|80|
29|81|
30|82|
31|83|
32|84|
33|85|
34|86|
35|87|
36|88|
37|89|
38|90|
39|91|
40|92|
41|93|
42|94|
43|95|
44|96|
45|97|
46|98|
47|99|
48|0|
49|1|
50|2|
51|3|
52|4|
53|5|
54|6|
55|7|
56|8|
57|9|
58|10|
59|11|
60|12|
61|13|
62|14|
63|15|
64|16|
65|17|
66|18|
67|19|
68|20|
69|21|
70|22|
71|23|
72|24|
73|25|
74|26|
75|27|
76|28|
77|29|
78|30|
79|31|
80|32|
81|33|
82|34|
83|35|
84|36|
85|37|
86|38|
87|39|
88|40|
89|41|
90|42|
91|43|
92|44|
93|45|
94|46|
95|47|
96|48|
97|49|
98|50|
99|51|
100|52|
101|53|
102|54|
103|55|
104|56|
105|57|
106|58|
107|59|
108|60|
109|61|
110|62|
111|63|
112|64|
113|65|
114|66|
115|67|
116|68|
117|69|
118|70|
119|71|
120|72|
121|73|
122|74|
123|75|
124|76|
125|77|
126|78|
127|79|
0|80|
1|81|
2|82|
3|83|
4|84|
5|85|
6|86|
7|87|
8|88|
9|89|
10|90|
11|91|
12|92|
13|93|
14|94|
15|95|
16|96|
17|97|
18|98|
19|99|
20|0|
21|1|
22|2|
23|3|
24|4|
25|5|
26|6|
27|7|
28|8|
29|9|
30|10|
31|11|
32|12|
33|13|
34|14|
35|15|
36|16|
37|17|
38|18|
39|19|
40|20|
41|21|
42|22|
43|23|
44|24|
45|25|
46|26|
47|27|
48|28|
49|29|
50|30|
51|31|
52|32|
53|33|
54|34|
55|35|
56|36|
57|37|
58|38|
59|39|
60|40|
61|41|
62|42|
63|43|
64|44|
65|45|
66|46|
67|47|
68|48|
69|49|
70|50|
71|51|
72|52|
73|53|
74|54|
75|55|
76|56|
77|57|
78|58|
79|59|
80|60|
81|61|
82|62|
83|63|
84|64|
85|65|
86|66|
87|67|
88|68|
89|69|
90|70|
91|71|
92|72|
93|73|
94|74|
95|75|
96|76|
97|77|
98|78|
99|79|
100|80|
101|81|
102|82|
103|83|
104|84|
105|85|
106|86|
107|87|
108|88|
109|89|
110|90|
111|91|
112|92|
113|93|
114|94|
115|95|
116|96|
117|97|
118|98|
119|99|
120|0|
121|1|
122|2|
123|3|
124|4|
125|5|
126|6|
127|7|
0|8|
1|9|
2|10|
3|11|
4|12|
5|13|
6|14|
7|15|
8|16|
9|17|
10|18|
11|19|
12|20|
13|21|
14|22|
15|23|
16|24|
17|25|
18|26|
19|27|
20|28|
21|29|
22|30|
23|31|
24|32|
25|33|
26|34|
27|35|
28|36|
29|37|
30|38|
31|39|
32|40|
33|41|
34|42|
35|43|
36|44|
37|45|
38|46|
39|47|
40|48|
41|49|
42|50|
43|51|
44|52|
45|53|
46|54|
47|55|
48|56|
49|57|
50|58|
51|59|
52|60|
53|61|
54|62|
55|63|
56|64|
57|65|
58|66|
59|67|
60|68|
61|69|
62|70|
63|71|
64|72|
65|73|
66|74|
67|75|
68|76|
69|77|
70|78|
71|79|
72|80|
73|81|
74|82|
75|83|
76|84|
77|85|
78|86|
79|87|
80|88|
81|89|
82|90|
83|91|
84|92|
85|93|
86|94|
87|95|
88|96|
89|97|
90|98|
91|99|
92|0|
93|1|
94|2|
95|3|
96|4|
97|5|
98|6|
99|7|
100|8|
101|9|
102|10|
103|11|
104|12|
105|13|
106|14|
107|15|
108|16|
109|17|
110|18|
111|19|
112|20|
113|21|
114|22|
115|23|
116|24|
117|25|
118|26|
119|27|
120|28|
121|29|
122|30|
123|31|
124|32|
125|33|
126|34|
127|35|
0|36|
1|37|
2|38|
3|39|
4|40|
5|41|
6|42|
7|43|
8|44|
9|45|
10|46|
11|47|
12|48|
13|49|
14|50|
15|51|
16|52|
17|53|
18|54|
19|55|
20|56|
21|57|
22|58|
23|59|
24|60|
25|61|
26|62|
27|63|
28|64|
29|65|
30|66|
31|67|
32|68|
33|69|
34|70|
35|71|
36|72|
37|73|
38|74|
39|75|
40|76|
41|77|
42|78|
43|79|
44|80|
45|81|
46|82|
47|83|
48|84|
49|85|
50|86|
51|87|
52|88|
53|89|
54|90|
55|91|
56|92|
57|93|
58|94|
59|95|
60|96|
61|97|
62|98|
63|99|
64|0|
65|1|
66|2|
67|3|
68|4|
69|5|
70|6|
71|7|
72|8|
73|9|
74|10|
75|11|
76|12|
77|13|
78|14|
79|15|
80|16|
81|17|
82|18|
83|19|
84|20|
85|21|
86|22|
87|23|
88|24|
89|25|
90|26|
91|27|
92|28|
93|29|
94|30|
95|31|
96|32|
97|33|
98|34|
99|35|
100|36|
101|37|
102|38|
103|39|
104|40|
105|41|
106|42|
107|43|
108|44|
109|45|
110|46|
111|47|
112|48|
113|49|
114|50|
115|51|
116|52|
117|53|
118|54|
119|55|
120|56|
121|57|
122|58|
123|59|
124|60|
125|61|
126|62|
127|63|
0|64|
1|65|
2|66|
3|67|
4|68|
5|69|
6|70|
7|71|
8|72|
9|73|
10|74|
11|75|
12|76|
13|77|
14|78|
15|79|
16|80|
17|81|
18|82|
19|83|
20|84|
21|85|
22|86|
23|87|
24|88|
25|89|
26|90|
27|91|
28|92|
29|93|
30|94|
31|95|
32|96|
33|97|
34|98|
35|99|
36|0|
37|1|
38|2|
39|3|
40|4|
41|5|
42|6|
43|7|
44|8|
45|9|
46|10|
47|11|
48|12|
49|13|
50|14|
51|15|
52|16|
53|17|
54|18|
55|19|
56|20|
57|21|
58|22|
59|23|
60|24|
61|25|
62|26|
63|27|
64|28|
65|29|
66|30|
67|31|
68|32|
69|33|
70|34|
71|35|
72|36|
73|37|
74|38|
75|39|
76|40|
77|41|
78|42|
79|43|
80|44|
81|45|
82|46|
83|47|
84|48|
85|49|
86|50|
87|51|
88|52|
89|53|
90|54|
91|55|
92|56|
93|57|
94|58|
95|59|
96|60|
97|61|
98|62|
99|63|
100|64|
101|65|
102|66|
103|67|
104|68|
105|69|
106|70|
107|71|
108|72|
109|73|
110|74|
111|75|
112|76|
113|77|
114|78|
115|79|
116|80|
117|81|
118|82|
119|83|
120|84|
121|85|
122|86|
123|87|
124|88|
125|89|
126|90|
127|91|
0|92|
1|93|
2|94|
3|95|
4|96|
5|97|
6|98|
7|99|
8|0|
9|1|
10|2|
11|3|
12|4|
13|5|
14|6|
15|7|
16|8|
17|9|
18|10|
19|11|
20|12|
21|13|
22|14|
23|15|
24|16|
25|17|
26|18|
27|19|
28|20|
29|21|
30|22|
31|23|
32|24|
33|25|
34|26|
35|27|
36|28|
37|29|
38|30|
39|31|
40|32|
41|33|
42|34|
43|35|
44|36|
45|37|
46|38|
47|39|
48|40|
49|41|
50|42|
51|43|
52|44|
53|45|
54|46|
55|47|
56|48|
57|49|
58|50|
59|51|
60|52|
61|53|
62|54|
63|55|
64|56|
65|57|
66|58|
67|59|
68|60|
69|61|
70|62|
71|63|
72|64|
73|65|
74|66|
75|67|
76|68|
77|69|
78|70|
79|71|
80|72|
81|73|
82|74|
83|75|
84|76|
85|77|
86|78|
87|79|
88|80|
89|81|
90|82|
91|83|
92|84|
93|85|
94|86|
95|87|
96|88|
97|89|
98|90|
99|91|
100|92|
101|93|
102|94|
103|95|
104|96|
105|97|
106|98|
107|99|
108|0|
109|1|
110|2|
111|3|
112|4|
113|5|
114|6|
115|7|
116|8|
117|9|
#current execute result is =>
 Expression 'FIRST_VALUE(`FACT_ONE_INDEX_ALL_TB`.`pk`)' is not in the select clause

##select_10_2018-10-30.sql
SELECT PI  () AS `select_column_0` FROM `broadcast_tb` WHERE ((`boolean_test` BETWEEN 1 AND 1)) OR ((`date_test` != '2015-12-02')) ORDER BY `pk`
#the baseline is =>
select_column_0|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
3.141593|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_9_02_2018-10-30.sql
SELECT bigint_test AS `select_column_0` FROM `fact_one_index_all_tb` WHERE ((`bigint_test` >= 12)) AND ((`tinyint_test` BETWEEN `smallint_test` AND `boolean_test`)) AND ((TIMEDIFF(`time_test`, '1 1:1:1.000002') = '2019-10-11')) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<TINYINT> BETWEEN ASYMMETRIC <SMALLINT> AND <BOOLEAN>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_9_02_2018-10-30.sql
SELECT bigint_test AS `select_column_0`, tinyint_test AS `select_column_1` FROM `fact_one_tb` WHERE ((`smallint_test` NOT BETWEEN `boolean_test` AND `float_test`)) OR (! (((`float_test` NOT BETWEEN 5.78 AND 4.12)))) OR ((`varchar_test` = 'safdwe')) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
10|14|
11|15|
12|16|
13|17|
14|18|
15|19|
16|20|
17|21|
18|22|
19|23|
20|24|
22|26|
23|27|
24|28|
25|29|
26|30|
27|31|
28|32|
29|33|
30|34|
31|35|
32|36|
33|37|
34|38|
36|40|
37|41|
38|42|
39|43|
40|44|
41|45|
42|46|
43|47|
44|48|
45|49|
46|50|
47|51|
48|52|
49|53|
50|54|
51|55|
52|56|
53|57|
54|58|
55|59|
56|60|
57|61|
58|62|
59|63|
60|64|
61|65|
62|66|
63|67|
64|68|
65|69|
66|70|
67|71|
68|72|
69|73|
70|74|
71|75|
72|76|
73|77|
74|78|
75|79|
76|80|
77|81|
78|82|
79|83|
80|84|
81|85|
82|86|
83|87|
84|88|
85|89|
86|90|
87|91|
88|92|
89|93|
90|94|
91|95|
92|96|
93|97|
94|98|
95|99|
96|100|
97|101|
98|102|
99|103|
0|104|
1|105|
2|106|
8|112|
9|113|
10|114|
11|115|
12|116|
13|117|
14|118|
15|119|
16|120|
17|121|
18|122|
20|124|
21|125|
22|126|
23|127|
24|0|
25|1|
26|2|
27|3|
28|4|
29|5|
30|6|
31|7|
32|8|
34|10|
35|11|
36|12|
37|13|
38|14|
39|15|
40|16|
41|17|
42|18|
43|19|
44|20|
45|21|
46|22|
48|24|
49|25|
50|26|
51|27|
52|28|
53|29|
54|30|
55|31|
56|32|
57|33|
58|34|
59|35|
60|36|
61|37|
62|38|
63|39|
64|40|
65|41|
66|42|
67|43|
68|44|
69|45|
70|46|
71|47|
72|48|
73|49|
74|50|
75|51|
76|52|
77|53|
78|54|
79|55|
80|56|
81|57|
82|58|
83|59|
84|60|
85|61|
86|62|
87|63|
88|64|
89|65|
90|66|
91|67|
92|68|
93|69|
94|70|
95|71|
96|72|
97|73|
98|74|
99|75|
0|76|
1|77|
2|78|
10|86|
11|87|
12|88|
13|89|
14|90|
15|91|
16|92|
18|94|
19|95|
20|96|
21|97|
22|98|
23|99|
24|100|
25|101|
26|102|
27|103|
28|104|
29|105|
30|106|
31|107|
32|108|
33|109|
34|110|
35|111|
36|112|
37|113|
38|114|
39|115|
40|116|
41|117|
42|118|
43|119|
44|120|
46|122|
47|123|
48|124|
49|125|
50|126|
51|127|
52|0|
53|1|
54|2|
55|3|
56|4|
57|5|
58|6|
59|7|
60|8|
61|9|
62|10|
63|11|
64|12|
65|13|
66|14|
67|15|
68|16|
69|17|
70|18|
71|19|
72|20|
73|21|
74|22|
75|23|
76|24|
77|25|
78|26|
79|27|
80|28|
81|29|
82|30|
83|31|
84|32|
85|33|
86|34|
87|35|
88|36|
89|37|
90|38|
91|39|
92|40|
93|41|
94|42|
95|43|
96|44|
97|45|
98|46|
99|47|
0|48|
1|49|
2|50|
7|55|
8|56|
10|58|
11|59|
12|60|
13|61|
14|62|
16|64|
17|65|
18|66|
19|67|
20|68|
21|69|
22|70|
23|71|
24|72|
25|73|
26|74|
27|75|
28|76|
30|78|
31|79|
32|80|
33|81|
34|82|
35|83|
36|84|
37|85|
38|86|
39|87|
40|88|
41|89|
42|90|
44|92|
45|93|
46|94|
47|95|
48|96|
49|97|
50|98|
51|99|
52|100|
53|101|
54|102|
55|103|
56|104|
57|105|
58|106|
59|107|
60|108|
61|109|
62|110|
63|111|
64|112|
65|113|
66|114|
67|115|
68|116|
69|117|
70|118|
71|119|
72|120|
73|121|
74|122|
75|123|
76|124|
77|125|
78|126|
79|127|
80|0|
81|1|
82|2|
83|3|
84|4|
85|5|
86|6|
87|7|
88|8|
89|9|
90|10|
91|11|
92|12|
93|13|
94|14|
95|15|
96|16|
97|17|
98|18|
99|19|
0|20|
1|21|
2|22|
9|29|
11|31|
12|32|
14|34|
15|35|
16|36|
17|37|
18|38|
19|39|
20|40|
21|41|
22|42|
23|43|
24|44|
25|45|
26|46|
28|48|
29|49|
30|50|
31|51|
32|52|
33|53|
34|54|
35|55|
36|56|
37|57|
38|58|
39|59|
40|60|
42|62|
43|63|
44|64|
45|65|
46|66|
47|67|
48|68|
49|69|
50|70|
51|71|
52|72|
53|73|
54|74|
55|75|
56|76|
57|77|
58|78|
59|79|
60|80|
61|81|
62|82|
63|83|
64|84|
65|85|
66|86|
67|87|
68|88|
69|89|
70|90|
71|91|
72|92|
73|93|
74|94|
75|95|
76|96|
77|97|
78|98|
79|99|
80|100|
81|101|
82|102|
83|103|
84|104|
85|105|
86|106|
87|107|
88|108|
89|109|
90|110|
91|111|
92|112|
93|113|
94|114|
95|115|
96|116|
97|117|
98|118|
99|119|
0|120|
1|121|
2|122|
7|127|
9|1|
10|2|
12|4|
13|5|
14|6|
15|7|
16|8|
17|9|
18|10|
19|11|
20|12|
21|13|
22|14|
23|15|
24|16|
26|18|
27|19|
28|20|
29|21|
30|22|
31|23|
32|24|
33|25|
34|26|
35|27|
36|28|
37|29|
38|30|
40|32|
41|33|
42|34|
43|35|
44|36|
45|37|
46|38|
47|39|
48|40|
49|41|
50|42|
51|43|
52|44|
53|45|
54|46|
55|47|
56|48|
57|49|
58|50|
59|51|
60|52|
61|53|
62|54|
63|55|
64|56|
65|57|
66|58|
67|59|
68|60|
69|61|
70|62|
71|63|
72|64|
73|65|
74|66|
75|67|
76|68|
77|69|
78|70|
79|71|
80|72|
81|73|
82|74|
83|75|
84|76|
85|77|
86|78|
87|79|
88|80|
89|81|
90|82|
91|83|
92|84|
93|85|
94|86|
95|87|
96|88|
97|89|
98|90|
99|91|
0|92|
1|93|
2|94|
5|97|
7|99|
8|100|
10|102|
11|103|
12|104|
13|105|
14|106|
15|107|
16|108|
17|109|
18|110|
19|111|
20|112|
21|113|
22|114|
24|116|
25|117|
26|118|
27|119|
28|120|
29|121|
30|122|
31|123|
32|124|
33|125|
34|126|
35|127|
36|0|
38|2|
39|3|
40|4|
41|5|
42|6|
43|7|
44|8|
45|9|
46|10|
47|11|
48|12|
49|13|
50|14|
51|15|
52|16|
53|17|
54|18|
55|19|
56|20|
57|21|
58|22|
59|23|
60|24|
61|25|
62|26|
63|27|
64|28|
65|29|
66|30|
67|31|
68|32|
69|33|
70|34|
71|35|
72|36|
73|37|
74|38|
75|39|
76|40|
77|41|
78|42|
79|43|
80|44|
81|45|
82|46|
83|47|
84|48|
85|49|
86|50|
87|51|
88|52|
89|53|
90|54|
91|55|
92|56|
93|57|
94|58|
95|59|
96|60|
97|61|
98|62|
99|63|
0|64|
1|65|
2|66|
6|70|
8|72|
9|73|
10|74|
11|75|
12|76|
13|77|
14|78|
15|79|
16|80|
17|81|
18|82|
19|83|
20|84|
22|86|
23|87|
24|88|
25|89|
26|90|
27|91|
28|92|
29|93|
30|94|
31|95|
32|96|
33|97|
34|98|
36|100|
37|101|
38|102|
39|103|
40|104|
41|105|
42|106|
43|107|
44|108|
45|109|
46|110|
47|111|
48|112|
49|113|
50|114|
51|115|
52|116|
53|117|
54|118|
55|119|
56|120|
57|121|
58|122|
59|123|
60|124|
61|125|
62|126|
63|127|
64|0|
65|1|
66|2|
67|3|
68|4|
69|5|
70|6|
71|7|
72|8|
73|9|
74|10|
75|11|
76|12|
77|13|
78|14|
79|15|
80|16|
81|17|
82|18|
83|19|
84|20|
85|21|
86|22|
87|23|
88|24|
89|25|
90|26|
91|27|
92|28|
93|29|
94|30|
95|31|
96|32|
97|33|
98|34|
99|35|
0|36|
1|37|
2|38|
8|44|
9|45|
10|46|
11|47|
12|48|
13|49|
14|50|
15|51|
16|52|
17|53|
18|54|
20|56|
21|57|
22|58|
23|59|
24|60|
25|61|
26|62|
27|63|
28|64|
29|65|
30|66|
31|67|
32|68|
34|70|
35|71|
36|72|
37|73|
38|74|
39|75|
40|76|
41|77|
42|78|
43|79|
44|80|
45|81|
46|82|
48|84|
49|85|
50|86|
51|87|
52|88|
53|89|
54|90|
55|91|
56|92|
57|93|
58|94|
59|95|
60|96|
61|97|
62|98|
63|99|
64|100|
65|101|
66|102|
67|103|
68|104|
69|105|
70|106|
71|107|
72|108|
73|109|
74|110|
75|111|
76|112|
77|113|
78|114|
79|115|
80|116|
81|117|
82|118|
83|119|
84|120|
85|121|
86|122|
87|123|
88|124|
89|125|
90|126|
91|127|
92|0|
93|1|
94|2|
95|3|
96|4|
97|5|
98|6|
99|7|
0|8|
1|9|
2|10|
10|18|
11|19|
12|20|
13|21|
14|22|
15|23|
16|24|
18|26|
19|27|
20|28|
21|29|
22|30|
23|31|
24|32|
25|33|
26|34|
27|35|
28|36|
29|37|
30|38|
32|40|
33|41|
34|42|
35|43|
36|44|
37|45|
38|46|
39|47|
40|48|
41|49|
42|50|
43|51|
44|52|
46|54|
47|55|
48|56|
49|57|
50|58|
51|59|
52|60|
53|61|
54|62|
55|63|
56|64|
57|65|
58|66|
59|67|
60|68|
61|69|
62|70|
63|71|
64|72|
65|73|
66|74|
67|75|
68|76|
69|77|
70|78|
71|79|
72|80|
73|81|
74|82|
75|83|
76|84|
77|85|
78|86|
79|87|
80|88|
81|89|
82|90|
83|91|
84|92|
85|93|
86|94|
87|95|
88|96|
89|97|
90|98|
91|99|
92|100|
93|101|
94|102|
95|103|
96|104|
97|105|
98|106|
99|107|
0|108|
1|109|
2|110|
8|116|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<SMALLINT> NOT BETWEEN ASYMMETRIC <BOOLEAN> AND <FLOAT(15, -1)>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_9_02_2018-10-30.sql
SELECT POWER(( tinyint_test +  82) =43,  smallint_test / 35   ) AS `select_column_0`, time_test AS `select_column_1` FROM `broadcast_tb` WHERE ((`date_test` <> '2012-12-13')) AND ((`integer_test` BETWEEN 9 AND 60)) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|select_column_1|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
0|11:23:45|
0|09:17:28|
0|09:12:28|
0|07:47:28|
0|14:47:28|
0|12:27:32|
0|12:23:34|
0|12:12:12|
0|20:12:12|
0|15:23:34|
0|18:35:23|
0|08:02:45|
0|06:34:12|
#current execute result is =>
 Cannot apply 'POWER' to arguments of type 'POWER(<BOOLEAN>, <DOUBLE>)'. Supported form(s): 'POWER(<NUMERIC>, <NUMERIC>)'

##select_10_2018-10-30.sql
SELECT date_test AS `select_column_0`, (bigint_test /  double_test) % 53=17 AS `select_column_1` FROM `fact_one_tb` WHERE ((`date_test` >= '2013-09-02')) AND ((`varchar_test` = 'hello1234')) AND ((17 = `float_test`)) AND ((`boolean_test` > 82)) AND ((`integer_test` NOT BETWEEN 49 AND 9)) AND ((`date_test` >= '2011-12-23')) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply '>' to arguments of type '<BOOLEAN> > <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> > <COMPARABLE_TYPE>'

##select_10_2018-10-30.sql
SELECT time_test AS `select_column_0` FROM `fact_one_tb` WHERE ((`tinyint_test` BETWEEN `float_test` AND `boolean_test`)) AND ((`double_test` BETWEEN 91 AND 7)) ORDER BY `pk`
#the baseline is =>
select_column_0|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<TINYINT> BETWEEN ASYMMETRIC <FLOAT(15, -1)> AND <BOOLEAN>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_5_2018-10-30.sql
SELECT integer_test *  smallint_test AS `select_column_0` FROM `broadcast_tb` WHERE ((61 != 63)) AND ((30 NOT BETWEEN `boolean_test` AND `smallint_test`)) AND ((`time_test` BETWEEN '12:12:12' AND '12:27:32')) ORDER BY `pk`
#the baseline is =>
select_column_0|
204|
234|
266|
456|
806|
864|
924|
24|
150|
176|
204|
374|
696|
750|
806|
6|
104|
126|
150|
300|
594|
644|
696|
986|
66|
84|
104|
234|
500|
546|
594|
864|
36|
50|
66|
176|
414|
456|
500|
750|
14|
24|
36|
126|
336|
374|
414|
644|
0|
6|
14|
84|
266|
300|
336|
546|
924|
986|
0|
50|
204|
234|
266|
456|
806|
864|
924|
24|
150|
176|
204|
374|
696|
750|
806|
6|
104|
126|
150|
300|
594|
644|
696|
986|
66|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<INTEGER> NOT BETWEEN ASYMMETRIC <BOOLEAN> AND <SMALLINT>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_5_2018-10-30.sql
SELECT POW(( integer_test %  32) / 60,  double_test - tinyint_test   ) AS `select_column_0`, smallint_test AS `select_column_1` FROM `fact_one_index_all_tb` WHERE (`boolean_test` NOT BETWEEN 0 AND 1) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> NOT BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_5_2018-10-30.sql
SELECT DISTINCT timestamp_test AS `select_column_0`, integer_test DIV  70 AS `select_column_1` FROM `fact_one_index_all_tb` WHERE ((51 < 90)) AND ((25 <=> `smallint_test`)) AND ((`date_test` >= '2011-12-23')) AND ((74 <= `bigint_test`)) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Expression 'FIRST_VALUE(`FACT_ONE_INDEX_ALL_TB`.`pk`)' is not in the select clause

##select_5_2018-10-30.sql
SELECT float_test /  65 AS `select_column_0` FROM `broadcast_tb` WHERE (`boolean_test` NOT IN (1, 2, 3)) ORDER BY `pk`
#the baseline is =>
select_column_0|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
0.006923076739678016|
0.03599999867952787|
0.6958461468036358|
0.0701538452735314|
0.06507692337036133|
0.10430769553551307|
0.11292307927058293|
#current execute result is =>
 Values passed to IN operator must have compatible types

##select_5_2018-10-30.sql
SELECT DISTINCTROW smallint_test AS `select_column_0`, LN(bigint_test MOD tinyint_test ) AS `select_column_1` FROM `fact_one_index_all_tb` WHERE ((`varchar_test` = 'adaabcwer')) AND ((`integer_test` NOT BETWEEN 62 AND 85)) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
14|2.833213344056216|
33|3.58351893845611|
52|4.007333185232471|
90|4.532599493153256|
9|2.4849066497880004|
28|1.0986122886681098|
47|3.1780538303479458|
4|1.9459101490553132|
23|3.258096538021482|
42|3.8066624897703196|
99|0.6931471805599453|
18|3.044522437723423|
37|3.6888794541139363|
56|4.07753744390572|
94|2.4849066497880004|
13|2.772588722239781|
32|3.5553480614894135|
51|3.9889840465642745|
89|4.5217885770490405|
8|0.6931471805599453|
27|2.0794415416798357|
46|2.0794415416798357|
84|2.0794415416798357|
3|1.791759469228055|
22|3.2188758248682006|
41|1.3862943611198906|
98|0|
17|2.995732273553991|
36|3.6635616461296463|
93|null|
12|2.70805020110221|
31|3.5263605246161616|
50|3.970291913552122|
88|4.51085950651685|
7|2.302585092994046|
26|3.367295829986474|
83|4.454347296253507|
2|1.6094379124341003|
#current execute result is =>
 Expression 'FIRST_VALUE(`FACT_ONE_INDEX_ALL_TB`.`pk`)' is not in the select clause

##select_5_2018-10-30.sql
SELECT ((boolean_test) in (1,2,3)) AS `select_column_0` FROM `broadcast_tb` WHERE (`integer_test` NOT BETWEEN 67 AND 5) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
0|
1|
#current execute result is =>
 Values passed to IN operator must have compatible types

##select_2_2018-10-30.sql
SELECT date_test AS `select_column_0` FROM `broadcast_tb` WHERE ((`boolean_test` NOT BETWEEN 1 AND 1)) AND ((DATE(`timestamp_test`) < '2019-10-11')) ORDER BY `pk`
#the baseline is =>
select_column_0|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
2013-09-02|
2011-06-22|
2014-02-12|
2013-04-05|
2010-02-22|
2014-05-26|
2003-04-05|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> NOT BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_6_2018-10-30.sql
SELECT 19 +  12 AS `select_column_0` FROM `broadcast_tb` WHERE ((IF((`float_test` < 20), 'yes', `varchar_test`) = 'yes')) AND ((`date_test` < '2013-09-02')) AND ((`boolean_test` NOT BETWEEN 1 AND 1)) AND ((`integer_test` NOT BETWEEN 97 AND 72)) AND ((94 <=> `double_test`)) ORDER BY `pk`
#the baseline is =>
select_column_0|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> NOT BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_2_2018-10-30.sql
SELECT sum( bigint_test * smallint_test  ) AS `select_column_0`, bigint_test AS `select_column_1` FROM `fact_one_index_all_tb` WHERE (`boolean_test` BETWEEN 0 AND 1) GROUP BY `bigint_test`
#the baseline is =>
select_column_0|select_column_1|
0|0|
980|1|
1980|2|
0|3|
40|4|
100|5|
180|6|
280|7|
400|8|
540|9|
700|10|
880|11|
1080|12|
1300|13|
1540|14|
1800|15|
2080|16|
2380|17|
2700|18|
3040|19|
3400|20|
3780|21|
4180|22|
4600|23|
5040|24|
5500|25|
5980|26|
6480|27|
7000|28|
7540|29|
8100|30|
8680|31|
9280|32|
9900|33|
10540|34|
11200|35|
11880|36|
12580|37|
13300|38|
14040|39|
14800|40|
15580|41|
16380|42|
17200|43|
18040|44|
18900|45|
19780|46|
20680|47|
21600|48|
22540|49|
23500|50|
24480|51|
25480|52|
26500|53|
27540|54|
28600|55|
29680|56|
30780|57|
31900|58|
33040|59|
34200|60|
35380|61|
36580|62|
37800|63|
39040|64|
40300|65|
41580|66|
42880|67|
44200|68|
45540|69|
46900|70|
48280|71|
49680|72|
51100|73|
52540|74|
54000|75|
55480|76|
56980|77|
58500|78|
60040|79|
61600|80|
63180|81|
64780|82|
66400|83|
68040|84|
69700|85|
71380|86|
73080|87|
74800|88|
76540|89|
78300|90|
80080|91|
81880|92|
83700|93|
85540|94|
87400|95|
89280|96|
91180|97|
93100|98|
95040|99|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_2_2018-10-30.sql
SELECT bigint_test AS `select_column_0`, 36 *  integer_test AS `select_column_1` FROM `broadcast_tb` WHERE ((`varchar_test` BETWEEN 'word23' AND 'einoejk')) AND ((`boolean_test` NOT BETWEEN `integer_test` AND `smallint_test`)) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> NOT BETWEEN ASYMMETRIC <INTEGER> AND <SMALLINT>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_2_2018-10-30.sql
SELECT CONV(-17,10,-18  ) AS `select_column_0`, timestamp_test AS `select_column_1` FROM `fact_one_tb` WHERE ((`float_test` NOT BETWEEN 16 AND `tinyint_test`)) AND ((CHAR(`varchar_test`, 121, 83, `boolean_test`, `double_test`) = 'serw')) AND ((`boolean_test` BETWEEN `integer_test` AND 43)) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_6_2018-10-30.sql
SELECT 88 *  double_test - 34 AS `select_column_0`, 50=40 AS `select_column_1` FROM `broadcast_tb` WHERE ((85 >= 30)) AND ((`tinyint_test` BETWEEN `integer_test` AND `boolean_test`)) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<TINYINT> BETWEEN ASYMMETRIC <INTEGER> AND <BOOLEAN>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_2_2018-10-30.sql
SELECT float_test AS `select_column_0` FROM `fact_one_tb` WHERE ((`boolean_test` BETWEEN 1 AND 1)) OR (((`tinyint_test` IS NULL)) AND ((`smallint_test` BETWEEN `double_test` AND `boolean_test`)) AND ((`varchar_test` = '')) AND ((`date_test` <=> '2013-09-02')) AND ((`bigint_test` <= 14))) ORDER BY `pk`
#the baseline is =>
select_column_0|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
5.78|
7.89|
4.12|
4.55|
4.32|
5.34|
4.51|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_6_2018-10-30.sql
SELECT DISTINCT tinyint_test AS `select_column_0`, date_test AS `select_column_1` FROM `fact_one_tb` WHERE ((`varchar_test` BETWEEN 'zhuoxue%yll' AND 'he343243')) AND ((87 NOT BETWEEN `integer_test` AND `smallint_test`)) AND (ISNULL(NULL)) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Expression 'FIRST_VALUE(`FACT_ONE_TB`.`pk`)' is not in the select clause

##select_2_2018-10-30.sql
SELECT date_test AS `select_column_0` FROM `fact_one_tb` WHERE ((`date_test` > '2015-11-23')) AND ((`date_test` = '2017-03-22')) ORDER BY `pk`
#the baseline is =>
select_column_0|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
2017-03-22|
#current execute result is =>
 java.math.BigDecimal cannot be cast to org.apache.calcite.util.DateString

##select_7_2018-10-30.sql
SELECT time_test AS `select_column_0` FROM `broadcast_index_all_tb` WHERE ((`boolean_test` NOT BETWEEN `smallint_test` AND `bigint_test`)) AND ((TIMESTAMPADD(MICROSECOND, 100, '2007-12-31 23:59:59.999999') > '2019-10-11')) AND ((`tinyint_test` < `bigint_test`)) AND ((`varchar_test` = 'adaabcwer')) AND ((`varchar_test` = 'he343243')) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> NOT BETWEEN ASYMMETRIC <SMALLINT> AND <BIGINT>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_3_2018-10-30.sql
SELECT PI( ) AS `select_column_0`, 38 MOD  bigint_test AS `select_column_1` FROM `fact_one_tb` WHERE (('10' NOT LIKE 'David_')) AND ((`date_test` NOT BETWEEN '2012-12-13' AND '2013-03-22')) AND ((`boolean_test` BETWEEN 0 AND 0)) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
3.141593|5|
3.141593|12|
3.141593|8|
3.141593|4|
3.141593|0|
3.141593|17|
3.141593|15|
3.141593|13|
3.141593|11|
3.141593|9|
3.141593|7|
3.141593|5|
3.141593|3|
3.141593|1|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|38|
3.141593|0|
3.141593|2|
3.141593|3|
3.141593|3|
3.141593|2|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_7_2018-10-30.sql
SELECT bigint_test AS `select_column_0`, varchar_test AS `select_column_1` FROM `fact_one_tb` WHERE ((`varchar_test` LIKE 'abc')) AND ((NULL IS NOT NULL)) AND ((`date_test` = '2010-02-22')) AND ((`boolean_test` NOT BETWEEN 19 AND `float_test`)) AND ((`varchar_test` = 'abdfeed')) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> NOT BETWEEN ASYMMETRIC <INTEGER> AND <FLOAT(15, -1)>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_9_02_2018-10-30.sql
SELECT date_test AS `select_column_0` FROM `broadcast_tb` WHERE ((`boolean_test` BETWEEN 1 AND 0)) AND ((`smallint_test` NOT BETWEEN 17 AND 35)) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_3_2018-10-30.sql
SELECT POWER(( integer_test -  tinyint_test) =21,  double_test MOD 48   ) AS `select_column_0`, PI() AS `select_column_1` FROM `fact_one_index_all_tb` WHERE (`boolean_test` BETWEEN 0 AND 0) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|select_column_1|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
0|3.141593|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_8_02_2018-10-30.sql
SELECT DISTINCTROW (float_test DIV  tinyint_test) DIV bigint_test +  double_test AS `select_column_0`, 74 -  smallint_test AS `select_column_1` FROM `broadcast_tb` WHERE ((`date_test` = '2011-06-22')) AND ((`date_test` > '2013-02-05')) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Expression 'FIRST_VALUE(`BROADCAST_TB`.`pk`)' is not in the select clause

##select_8_02_2018-10-30.sql
SELECT integer_test + (double_test DIV  float_test) + tinyint_test AS `select_column_0`, PI() AS `select_column_1` FROM `broadcast_tb` WHERE ((23 >= `boolean_test`)) AND ((`varchar_test` = 'hellorew')) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|select_column_1|
180|3.141593|
1954|3.141593|
345|3.141593|
131|3.141593|
377|3.141593|
496|3.141593|
178|3.141593|
146|3.141593|
116|3.141593|
70|3.141593|
134|3.141593|
92|3.141593|
184|3.141593|
150|3.141593|
278|3.141593|
127|3.141593|
120|3.141593|
107|3.141593|
211|3.141593|
209|3.141593|
419|3.141593|
728|3.141593|
490|3.141593|
486|3.141593|
203|3.141593|
169|3.141593|
209|3.141593|
93|3.141593|
49|3.141593|
118|3.141593|
213|3.141593|
176|3.141593|
134|3.141593|
125|3.141593|
154|3.141593|
126|3.141593|
200|3.141593|
242|3.141593|
330|3.141593|
3290|3.141593|
451|3.141593|
116|3.141593|
129|3.141593|
194|3.141593|
153|3.141593|
119|3.141593|
92|3.141593|
45|3.141593|
#current execute result is =>
 Cannot apply '>=' to arguments of type '<INTEGER> >= <BOOLEAN>'. Supported form(s): '<COMPARABLE_TYPE> >= <COMPARABLE_TYPE>'

##select_8_02_2018-10-30.sql
SELECT (bigint_test /  95) DIV 85 DIV  77 AS `select_column_0`, (double_test MOD  95) - 27 *  3 AS `select_column_1` FROM `fact_one_index_all_tb` WHERE ((`varchar_test` = 'hello1234')) AND ((`double_test` BETWEEN `boolean_test` AND `tinyint_test`)) AND ((`varchar_test` = 'word23')) AND ((`integer_test` NOT BETWEEN 52 AND `smallint_test`)) ORDER BY `pk` DESC
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<DOUBLE(15, -1)> BETWEEN ASYMMETRIC <BOOLEAN> AND <TINYINT>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_3_2018-10-30.sql
SELECT PI( ) AS `select_column_0`, bigint_test AS `select_column_1` FROM `broadcast_tb` WHERE (('Hello' LIKE 'abc')) AND ((92 BETWEEN `boolean_test` AND 96)) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<INTEGER> BETWEEN ASYMMETRIC <BOOLEAN> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_3_2018-10-30.sql
SELECT tinyint_test AS `select_column_0`, bigint_test AS `select_column_1` FROM `broadcast_index_all_tb` WHERE ((`boolean_test` BETWEEN `integer_test` AND `float_test`)) AND ((`timestamp_test` BETWEEN '2014-02-12 11:23:45' AND '2013-03-22 09:17:28')) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> BETWEEN ASYMMETRIC <INTEGER> AND <FLOAT(15, -1)>'. Supported form(s): '<COMPARABLE_TYPE> BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_8_02_2018-10-30.sql
SELECT 0 +  79 AS `select_column_0`, tinyint_test AS `select_column_1` FROM `fact_one_tb` WHERE ((`varchar_test` = '')) AND ((`boolean_test` NOT BETWEEN 0 AND 1)) ORDER BY `pk`
#the baseline is =>
select_column_0|select_column_1|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<BOOLEAN> NOT BETWEEN ASYMMETRIC <INTEGER> AND <INTEGER>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'

##select_3_2018-10-30.sql
SELECT bigint_test AS `select_column_0` FROM `broadcast_index_all_tb` WHERE ((`date_test` != '2015-12-02')) AND (ISNULL(1)) AND ((`double_test` NOT BETWEEN `boolean_test` AND `float_test`)) AND (ISNULL(0)) AND ((`date_test` > '2011-12-23')) ORDER BY `pk`
#the baseline is =>
select_column_0|
#current execute result is =>
 Cannot apply 'NOT BETWEEN ASYMMETRIC' to arguments of type '<DOUBLE(15, -1)> NOT BETWEEN ASYMMETRIC <BOOLEAN> AND <FLOAT(15, -1)>'. Supported form(s): '<COMPARABLE_TYPE> NOT BETWEEN <COMPARABLE_TYPE> AND <COMPARABLE_TYPE>'
